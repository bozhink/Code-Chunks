<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0) on Fri May 25 15:43:20 EDT 2007 -->
<TITLE>
EasyIn
</TITLE>

<META NAME="date" CONTENT="2007-05-25">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="EasyIn";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/netlib/util/Dummy.html" title="class in org.netlib.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/netlib/util/Etime.html" title="class in org.netlib.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/netlib/util/EasyIn.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="EasyIn.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.netlib.util</FONT>
<BR>
Class EasyIn</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.netlib.util.EasyIn</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>EasyIn</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Simple input from the keyboard for all primitive types. ver 1.0
 <p>
 Copyright (c) Peter van der Linden,  May 5 1997.
     corrected error message 11/21/97
 <p>
 The creator of this software hereby gives you permission to:
 <ol>
  <li> copy the work without changing it
  <li> modify the work providing you send me a copy which I can
     use in any way I want, including incorporating into this work.
  <li> distribute copies of the work to the public by sale, lease, 
     rental, or lending
  <li> perform the work
  <li> display the work
  <li> fold the work into a funny hat and wear it on your head.
 </ol>
 <p>
 This is not thread safe, not high performance, and doesn't tell EOF.
 It's intended for low-volume easy keyboard input.
 An example of use is:
 <p>
 <code>
     EasyIn easy = new EasyIn(); <br>
     int i = easy.readInt();   // reads an int from System.in <br>
     float f = easy.readFloat();   // reads a float from System.in <br>
 </code>
 <p>
 2/25/98 - modified by Keith Seymour to be useful with the f2j
           translator.
 <p>
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Peter van der Linden</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#EasyIn()">EasyIn</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#main(java.lang.String[])">main</A></B>(java.lang.String[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is just here to test the class</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#myCrappyReadLine()">myCrappyReadLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readboolean()">readboolean</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a boolean value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readBoolean()">readBoolean</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a boolean value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readbyte()">readbyte</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a byte value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readByte()">readByte</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a byte value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readchar()">readchar</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a character value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readChar()">readChar</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a character value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readchars(int)">readchars</A></B>(int&nbsp;num_chars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads the specified number of characters and returns a new String
 containing them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readChars(int)">readChars</A></B>(int&nbsp;num_chars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads the specified number of characters and returns a new String
 containing them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readdouble()">readdouble</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a double value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readDouble()">readDouble</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a double value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readfloat()">readfloat</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a float value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readFloat()">readFloat</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a float value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readint()">readint</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets an integer value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readInt()">readInt</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets an integer value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readlong()">readlong</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a long integer value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readLong()">readLong</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a long integer value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readshort()">readshort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a short value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readShort()">readShort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a short value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readstring()">readstring</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a string value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#readString()">readString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a string value from the next token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/EasyIn.html#skipRemaining()">skipRemaining</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Skips any tokens remaining on this line.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="EasyIn()"><!-- --></A><H3>
EasyIn</H3>
<PRE>
public <B>EasyIn</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="myCrappyReadLine()"><!-- --></A><H3>
myCrappyReadLine</H3>
<PRE>
public static java.lang.String <B>myCrappyReadLine</B>()
                                         throws java.io.IOException</PRE>
<DL>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readchars(int)"><!-- --></A><H3>
readchars</H3>
<PRE>
public java.lang.String <B>readchars</B>(int&nbsp;num_chars)
                           throws java.io.IOException</PRE>
<DL>
<DD>Reads the specified number of characters and returns a new String
 containing them.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>num_chars</CODE> - the number of characters to read
<DT><B>Returns:</B><DD>the String containing the characters read.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readChars(int)"><!-- --></A><H3>
readChars</H3>
<PRE>
public java.lang.String <B>readChars</B>(int&nbsp;num_chars)</PRE>
<DL>
<DD>Reads the specified number of characters and returns a new String
 containing them.  Unlike readchars(), does not throw IOException.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>num_chars</CODE> - the number of characters to read
<DT><B>Returns:</B><DD>the String containing the characters read.</DL>
</DD>
</DL>
<HR>

<A NAME="skipRemaining()"><!-- --></A><H3>
skipRemaining</H3>
<PRE>
public void <B>skipRemaining</B>()</PRE>
<DL>
<DD>Skips any tokens remaining on this line.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="readboolean()"><!-- --></A><H3>
readboolean</H3>
<PRE>
public boolean <B>readboolean</B>()
                    throws java.io.IOException</PRE>
<DL>
<DD>Gets a boolean value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the boolean value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readBoolean()"><!-- --></A><H3>
readBoolean</H3>
<PRE>
public boolean <B>readBoolean</B>()</PRE>
<DL>
<DD>Gets a boolean value from the next token.
 Same as readboolean() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the boolean value</DL>
</DD>
</DL>
<HR>

<A NAME="readbyte()"><!-- --></A><H3>
readbyte</H3>
<PRE>
public byte <B>readbyte</B>()
              throws java.io.IOException</PRE>
<DL>
<DD>Gets a byte value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the byte value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readByte()"><!-- --></A><H3>
readByte</H3>
<PRE>
public byte <B>readByte</B>()</PRE>
<DL>
<DD>Gets a byte value from the next token.
 Same as readbyte() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the byte value</DL>
</DD>
</DL>
<HR>

<A NAME="readshort()"><!-- --></A><H3>
readshort</H3>
<PRE>
public short <B>readshort</B>()
                throws java.io.IOException</PRE>
<DL>
<DD>Gets a short value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the short value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readShort()"><!-- --></A><H3>
readShort</H3>
<PRE>
public short <B>readShort</B>()</PRE>
<DL>
<DD>Gets a short value from the next token.
 Same as readshort() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the short value</DL>
</DD>
</DL>
<HR>

<A NAME="readint()"><!-- --></A><H3>
readint</H3>
<PRE>
public int <B>readint</B>()
            throws java.io.IOException</PRE>
<DL>
<DD>Gets an integer value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the integer value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readInt()"><!-- --></A><H3>
readInt</H3>
<PRE>
public int <B>readInt</B>()</PRE>
<DL>
<DD>Gets an integer value from the next token.
 Same as readint() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the integer value</DL>
</DD>
</DL>
<HR>

<A NAME="readlong()"><!-- --></A><H3>
readlong</H3>
<PRE>
public long <B>readlong</B>()
              throws java.io.IOException</PRE>
<DL>
<DD>Gets a long integer value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the long integer value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readLong()"><!-- --></A><H3>
readLong</H3>
<PRE>
public long <B>readLong</B>()</PRE>
<DL>
<DD>Gets a long integer value from the next token.
 Same as readlong() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the long integer value</DL>
</DD>
</DL>
<HR>

<A NAME="readfloat()"><!-- --></A><H3>
readfloat</H3>
<PRE>
public float <B>readfloat</B>()
                throws java.io.IOException</PRE>
<DL>
<DD>Gets a float value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the float value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readFloat()"><!-- --></A><H3>
readFloat</H3>
<PRE>
public float <B>readFloat</B>()</PRE>
<DL>
<DD>Gets a float value from the next token.
 Same as readfloat() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the float value</DL>
</DD>
</DL>
<HR>

<A NAME="readdouble()"><!-- --></A><H3>
readdouble</H3>
<PRE>
public double <B>readdouble</B>()
                  throws java.io.IOException</PRE>
<DL>
<DD>Gets a double value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the double value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readDouble()"><!-- --></A><H3>
readDouble</H3>
<PRE>
public double <B>readDouble</B>()</PRE>
<DL>
<DD>Gets a double value from the next token.
 Same as readdouble() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the double value</DL>
</DD>
</DL>
<HR>

<A NAME="readchar()"><!-- --></A><H3>
readchar</H3>
<PRE>
public char <B>readchar</B>()
              throws java.io.IOException</PRE>
<DL>
<DD>Gets a character value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the character value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readChar()"><!-- --></A><H3>
readChar</H3>
<PRE>
public char <B>readChar</B>()</PRE>
<DL>
<DD>Gets a character value from the next token.
 Same as readchar() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the character value</DL>
</DD>
</DL>
<HR>

<A NAME="readstring()"><!-- --></A><H3>
readstring</H3>
<PRE>
public java.lang.String <B>readstring</B>()
                            throws java.io.IOException</PRE>
<DL>
<DD>Gets a string value from the next token.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the string value
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an input or output exception occurred.</DL>
</DD>
</DL>
<HR>

<A NAME="readString()"><!-- --></A><H3>
readString</H3>
<PRE>
public java.lang.String <B>readString</B>()</PRE>
<DL>
<DD>Gets a string value from the next token.
 Same as readstring() except it does not throw IOException.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the string value</DL>
</DD>
</DL>
<HR>

<A NAME="main(java.lang.String[])"><!-- --></A><H3>
main</H3>
<PRE>
public static void <B>main</B>(java.lang.String[]&nbsp;args)</PRE>
<DL>
<DD>This method is just here to test the class
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/netlib/util/Dummy.html" title="class in org.netlib.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/netlib/util/Etime.html" title="class in org.netlib.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/netlib/util/EasyIn.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="EasyIn.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
