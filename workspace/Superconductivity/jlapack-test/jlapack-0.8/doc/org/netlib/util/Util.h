<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0) on Fri May 25 15:43:20 EDT 2007 -->
<TITLE>
Util
</TITLE>

<META NAME="date" CONTENT="2007-05-25">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Util";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/netlib/util/StringW.html" title="class in org.netlib.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/netlib/util/Util.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Util.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.netlib.util</FONT>
<BR>
Class Util</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.netlib.util.Util</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../org/netlib/util/StrictUtil.html" title="class in org.netlib.util">StrictUtil</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>Util</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Implementations of various Fortran intrinsic functions.
 <p>
 This file is part of the Fortran-to-Java (f2j) system,
 developed at the University of Tennessee.
 <p>
 This class contains various helper routines for f2j-generated code.
 These routines are primarily implemented for handling Fortran intrinsic
 functions.
 <p>
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Keith Seymour (seymour@cs.utk.edu)</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#Util()">Util</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#cosh(double)">cosh</A></B>(double&nbsp;a)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran hyperbolic cosine (COSH) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#ddim(double, double)">ddim</A></B>(double&nbsp;a1,
     double&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran double precision positive difference (DDIM) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#dim(float, float)">dim</A></B>(float&nbsp;a1,
    float&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran floating point positive difference (DIM) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#dsign(double, double)">dsign</A></B>(double&nbsp;a1,
      double&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran double precision transfer of sign (DSIGN) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#f77read(java.lang.String, java.util.Vector)">f77read</A></B>(java.lang.String&nbsp;fmt,
        java.util.Vector&nbsp;v)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Formatted read.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#f77write(java.lang.String, java.util.Vector)">f77write</A></B>(java.lang.String&nbsp;fmt,
         java.util.Vector&nbsp;v)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Formatted write.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#f77write(java.util.Vector)">f77write</A></B>(java.util.Vector&nbsp;v)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unformatted write.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#idim(int, int)">idim</A></B>(int&nbsp;a1,
     int&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran integer positive difference (IDIM) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#idnint(double)">idnint</A></B>(double&nbsp;x)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran nearest integer (IDNINT) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#isign(int, int)">isign</A></B>(int&nbsp;a1,
      int&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran integer transfer of sign (ISIGN) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#log10(double)">log10</A></B>(double&nbsp;x)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base-10 logarithm function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#log10(float)">log10</A></B>(float&nbsp;x)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base-10 logarithm function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#max(double, double, double)">max</A></B>(double&nbsp;x,
    double&nbsp;y,
    double&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument double precision max function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#max(float, float, float)">max</A></B>(float&nbsp;x,
    float&nbsp;y,
    float&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument single precision max function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#max(int, int, int)">max</A></B>(int&nbsp;x,
    int&nbsp;y,
    int&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument integer max function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#min(double, double, double)">min</A></B>(double&nbsp;x,
    double&nbsp;y,
    double&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument double precision min function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#min(float, float, float)">min</A></B>(float&nbsp;x,
    float&nbsp;y,
    float&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument single precision min function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#min(int, int, int)">min</A></B>(int&nbsp;x,
    int&nbsp;y,
    int&nbsp;z)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Three argument integer min function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#nint(float)">nint</A></B>(float&nbsp;x)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran nearest integer (NINT) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#pause()">pause</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pauses execution temporarily.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#pause(java.lang.String)">pause</A></B>(java.lang.String&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pauses execution temporarily.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#sign(float, float)">sign</A></B>(float&nbsp;a1,
     float&nbsp;a2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran floating point transfer of sign (SIGN) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#sinh(double)">sinh</A></B>(double&nbsp;a)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran hyperbolic sine (SINH) intrinsic function.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#strCharAt(java.lang.String, int)">strCharAt</A></B>(java.lang.String&nbsp;s,
          int&nbsp;idx)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a string representation of the character at the given index.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#stringInsert(java.lang.String, java.lang.String, int)">stringInsert</A></B>(java.lang.String&nbsp;x,
             java.lang.String&nbsp;y,
             int&nbsp;E1)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Inserts a string into a single character substring of another string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#stringInsert(java.lang.String, java.lang.String, int, int)">stringInsert</A></B>(java.lang.String&nbsp;x,
             java.lang.String&nbsp;y,
             int&nbsp;E1,
             int&nbsp;E2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Inserts a string into a substring of another string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/netlib/util/Util.html#tanh(double)">tanh</A></B>(double&nbsp;a)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran hyperbolic tangent (TANH) intrinsic function.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Util()"><!-- --></A><H3>
Util</H3>
<PRE>
public <B>Util</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="stringInsert(java.lang.String, java.lang.String, int, int)"><!-- --></A><H3>
stringInsert</H3>
<PRE>
public static java.lang.String <B>stringInsert</B>(java.lang.String&nbsp;x,
                                            java.lang.String&nbsp;y,
                                            int&nbsp;E1,
                                            int&nbsp;E2)</PRE>
<DL>
<DD>Inserts a string into a substring of another string.
 <p>
 This method handles situations in which the lhs of an
 assignment statement is a substring operation.  For example:
 <p>
 <code>
   a(3:4) = 'hi'
 </code>
 <p>
 We haven't figured out an elegant way to do this with Java Strings,
 but we do handle it, as follows:
 <p>
 <p>
 <code>
  a = new StringW(
        a.val.substring(0,E1-1) +
        "hi".substring(0,E2-E1+1) +
        a.val.substring(E2,a.val.length())
      );
 <code>
 <p>
 Where E1 is the expression representing the starting index of the substring
 and E2 is the expression representing the ending index of the substring
 <p>
 The resulting code looks pretty bad because we have to be
 prepared to handle rhs strings that are too big to fit in
 the lhs substring.
 <p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - dest (string to be inserted into)<DD><CODE>y</CODE> - source (substring to insert into 'x')<DD><CODE>E1</CODE> - expression representing the start of the substring<DD><CODE>E2</CODE> - expression representing the end of the substring
<DT><B>Returns:</B><DD>the string containing the complete string after inserting the
    substring</DL>
</DD>
</DL>
<HR>

<A NAME="stringInsert(java.lang.String, java.lang.String, int)"><!-- --></A><H3>
stringInsert</H3>
<PRE>
public static java.lang.String <B>stringInsert</B>(java.lang.String&nbsp;x,
                                            java.lang.String&nbsp;y,
                                            int&nbsp;E1)</PRE>
<DL>
<DD>Inserts a string into a single character substring of another string.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - dest (string to be inserted into)<DD><CODE>y</CODE> - source (substring to insert into 'x')<DD><CODE>E1</CODE> - expression representing the index of the character
<DT><B>Returns:</B><DD>the string containing the complete string after inserting the
    substring</DL>
</DD>
</DL>
<HR>

<A NAME="strCharAt(java.lang.String, int)"><!-- --></A><H3>
strCharAt</H3>
<PRE>
public static java.lang.String <B>strCharAt</B>(java.lang.String&nbsp;s,
                                         int&nbsp;idx)</PRE>
<DL>
<DD>Returns a string representation of the character at the given index.
 Note: this is based on the Fortran index (1..N).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - the string<DD><CODE>idx</CODE> - the index
<DT><B>Returns:</B><DD>new string containing a single character (from s[idx])</DL>
</DD>
</DL>
<HR>

<A NAME="max(int, int, int)"><!-- --></A><H3>
max</H3>
<PRE>
public static int <B>max</B>(int&nbsp;x,
                      int&nbsp;y,
                      int&nbsp;z)</PRE>
<DL>
<DD>Three argument integer max function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the largest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="max(float, float, float)"><!-- --></A><H3>
max</H3>
<PRE>
public static float <B>max</B>(float&nbsp;x,
                        float&nbsp;y,
                        float&nbsp;z)</PRE>
<DL>
<DD>Three argument single precision max function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the largest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="max(double, double, double)"><!-- --></A><H3>
max</H3>
<PRE>
public static double <B>max</B>(double&nbsp;x,
                         double&nbsp;y,
                         double&nbsp;z)</PRE>
<DL>
<DD>Three argument double precision max function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the largest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="min(int, int, int)"><!-- --></A><H3>
min</H3>
<PRE>
public static int <B>min</B>(int&nbsp;x,
                      int&nbsp;y,
                      int&nbsp;z)</PRE>
<DL>
<DD>Three argument integer min function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the smallest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="min(float, float, float)"><!-- --></A><H3>
min</H3>
<PRE>
public static float <B>min</B>(float&nbsp;x,
                        float&nbsp;y,
                        float&nbsp;z)</PRE>
<DL>
<DD>Three argument single precision min function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the smallest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="min(double, double, double)"><!-- --></A><H3>
min</H3>
<PRE>
public static double <B>min</B>(double&nbsp;x,
                         double&nbsp;y,
                         double&nbsp;z)</PRE>
<DL>
<DD>Three argument double precision min function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - value 1<DD><CODE>y</CODE> - value 2<DD><CODE>z</CODE> - value 3
<DT><B>Returns:</B><DD>the smallest of x, y, or z</DL>
</DD>
</DL>
<HR>

<A NAME="log10(double)"><!-- --></A><H3>
log10</H3>
<PRE>
public static double <B>log10</B>(double&nbsp;x)</PRE>
<DL>
<DD>Base-10 logarithm function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - the value
<DT><B>Returns:</B><DD>base-10 log of x</DL>
</DD>
</DL>
<HR>

<A NAME="log10(float)"><!-- --></A><H3>
log10</H3>
<PRE>
public static float <B>log10</B>(float&nbsp;x)</PRE>
<DL>
<DD>Base-10 logarithm function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - the value
<DT><B>Returns:</B><DD>base-10 log of x</DL>
</DD>
</DL>
<HR>

<A NAME="nint(float)"><!-- --></A><H3>
nint</H3>
<PRE>
public static int <B>nint</B>(float&nbsp;x)</PRE>
<DL>
<DD>Fortran nearest integer (NINT) intrinsic function.
 <p>
 Returns:
 <ul>
   <li> (int)(x+0.5), if x &gt;= 0
   <li> (int)(x-0.5), if x &lt; 0
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - the floating point value
<DT><B>Returns:</B><DD>the nearest integer to x</DL>
</DD>
</DL>
<HR>

<A NAME="idnint(double)"><!-- --></A><H3>
idnint</H3>
<PRE>
public static int <B>idnint</B>(double&nbsp;x)</PRE>
<DL>
<DD>Fortran nearest integer (IDNINT) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> (int)(x+0.5), if x &gt;= 0
   <li> (int)(x-0.5), if x &lt; 0
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - the double precision floating point value
<DT><B>Returns:</B><DD>the nearest integer to x</DL>
</DD>
</DL>
<HR>

<A NAME="sign(float, float)"><!-- --></A><H3>
sign</H3>
<PRE>
public static float <B>sign</B>(float&nbsp;a1,
                         float&nbsp;a2)</PRE>
<DL>
<DD>Fortran floating point transfer of sign (SIGN) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> abs(a1), if a2 &gt;= 0
   <li>-abs(a1), if a2 &lt; 0
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - floating point value<DD><CODE>a2</CODE> - sign transfer indicator
<DT><B>Returns:</B><DD>equivalent of Fortran SIGN(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="isign(int, int)"><!-- --></A><H3>
isign</H3>
<PRE>
public static int <B>isign</B>(int&nbsp;a1,
                        int&nbsp;a2)</PRE>
<DL>
<DD>Fortran integer transfer of sign (ISIGN) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> abs(a1), if a2 &gt;= 0
   <li>-abs(a1), if a2 &lt; 0
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - integer value<DD><CODE>a2</CODE> - sign transfer indicator
<DT><B>Returns:</B><DD>equivalent of Fortran ISIGN(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="dsign(double, double)"><!-- --></A><H3>
dsign</H3>
<PRE>
public static double <B>dsign</B>(double&nbsp;a1,
                           double&nbsp;a2)</PRE>
<DL>
<DD>Fortran double precision transfer of sign (DSIGN) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> abs(a1), if a2 &gt;= 0
   <li>-abs(a1), if a2 &lt; 0
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - double precision floating point value<DD><CODE>a2</CODE> - sign transfer indicator
<DT><B>Returns:</B><DD>equivalent of Fortran DSIGN(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="dim(float, float)"><!-- --></A><H3>
dim</H3>
<PRE>
public static float <B>dim</B>(float&nbsp;a1,
                        float&nbsp;a2)</PRE>
<DL>
<DD>Fortran floating point positive difference (DIM) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> a1 - a2, if a1 &gt; a2
   <li> 0, if a1 &lt;= a2
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - floating point value<DD><CODE>a2</CODE> - floating point value
<DT><B>Returns:</B><DD>equivalent of Fortran DIM(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="idim(int, int)"><!-- --></A><H3>
idim</H3>
<PRE>
public static int <B>idim</B>(int&nbsp;a1,
                       int&nbsp;a2)</PRE>
<DL>
<DD>Fortran integer positive difference (IDIM) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> a1 - a2, if a1 &gt; a2
   <li> 0, if a1 &lt;= a2
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - integer value<DD><CODE>a2</CODE> - integer value
<DT><B>Returns:</B><DD>equivalent of Fortran IDIM(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="ddim(double, double)"><!-- --></A><H3>
ddim</H3>
<PRE>
public static double <B>ddim</B>(double&nbsp;a1,
                          double&nbsp;a2)</PRE>
<DL>
<DD>Fortran double precision positive difference (DDIM) intrinsic function.
 <p>
 Returns:<br>
 <ul>
   <li> a1 - a2, if a1 &gt; a2
   <li> 0, if a1 &lt;= a2
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a1</CODE> - double precision floating point value<DD><CODE>a2</CODE> - double precision floating point value
<DT><B>Returns:</B><DD>equivalent of Fortran DDIM(a1,a2) as described above.</DL>
</DD>
</DL>
<HR>

<A NAME="sinh(double)"><!-- --></A><H3>
sinh</H3>
<PRE>
public static double <B>sinh</B>(double&nbsp;a)</PRE>
<DL>
<DD>Fortran hyperbolic sine (SINH) intrinsic function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a</CODE> - the value to get the sine of
<DT><B>Returns:</B><DD>the hyperbolic sine of a</DL>
</DD>
</DL>
<HR>

<A NAME="cosh(double)"><!-- --></A><H3>
cosh</H3>
<PRE>
public static double <B>cosh</B>(double&nbsp;a)</PRE>
<DL>
<DD>Fortran hyperbolic cosine (COSH) intrinsic function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a</CODE> - the value to get the cosine of
<DT><B>Returns:</B><DD>the hyperbolic cosine of a</DL>
</DD>
</DL>
<HR>

<A NAME="tanh(double)"><!-- --></A><H3>
tanh</H3>
<PRE>
public static double <B>tanh</B>(double&nbsp;a)</PRE>
<DL>
<DD>Fortran hyperbolic tangent (TANH) intrinsic function.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a</CODE> - the value to get the tangent of
<DT><B>Returns:</B><DD>the hyperbolic tangent of a</DL>
</DD>
</DL>
<HR>

<A NAME="pause()"><!-- --></A><H3>
pause</H3>
<PRE>
public static void <B>pause</B>()</PRE>
<DL>
<DD>Pauses execution temporarily.
 <p>
 I think this was an implementation dependent feature of Fortran 77.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="pause(java.lang.String)"><!-- --></A><H3>
pause</H3>
<PRE>
public static void <B>pause</B>(java.lang.String&nbsp;msg)</PRE>
<DL>
<DD>Pauses execution temporarily.
 <p>
 I think this was an implementation dependent feature of Fortran 77.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message to be printed before pausing.  if null, no
   message will be printed.</DL>
</DD>
</DL>
<HR>

<A NAME="f77write(java.lang.String, java.util.Vector)"><!-- --></A><H3>
f77write</H3>
<PRE>
public static void <B>f77write</B>(java.lang.String&nbsp;fmt,
                            java.util.Vector&nbsp;v)</PRE>
<DL>
<DD>Formatted write.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fmt</CODE> - String containing the Fortran format specification.<DD><CODE>v</CODE> - Vector containing the arguments to the WRITE() call.</DL>
</DD>
</DL>
<HR>

<A NAME="f77write(java.util.Vector)"><!-- --></A><H3>
f77write</H3>
<PRE>
public static void <B>f77write</B>(java.util.Vector&nbsp;v)</PRE>
<DL>
<DD>Unformatted write.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>v</CODE> - Vector containing the arguments to the WRITE() call.</DL>
</DD>
</DL>
<HR>

<A NAME="f77read(java.lang.String, java.util.Vector)"><!-- --></A><H3>
f77read</H3>
<PRE>
public static int <B>f77read</B>(java.lang.String&nbsp;fmt,
                          java.util.Vector&nbsp;v)</PRE>
<DL>
<DD>Formatted read.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fmt</CODE> - String containing the Fortran format specification.<DD><CODE>v</CODE> - Vector containing the arguments to the READ() call.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/netlib/util/StringW.html" title="class in org.netlib.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/netlib/util/Util.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Util.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
