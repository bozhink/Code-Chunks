package org.opensourcephysics.sip.ch15;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.util.StringTokenizer;import javax.swing.JFileChooser;import org.opensourcephysics.controls.AbstractCalculation;import org.opensourcephysics.controls.CalculationControl;import org.opensourcephysics.frames.PlotFrame;/** * AutoCorrelatorApp computes energy and magnetization * time autocorrelation function from file input data * @author Jan Tobochnik * @version 1.0  JT revised 12/20/04 */public class AutoCorrelatorApp extends AbstractCalculation   {   PlotFrame plotFrame = new PlotFrame("tau", "<E(t+tau)E(t)> and <M(t+tau)M(t)>", "Time correlations");   double [] energy, magnetization;   int numberOfPoints;  /**   * Creates new arrays, reads data in and computes correlation.   */   public void calculate() {      energy = new double[1000];      magnetization = new double[1000];      numberOfPoints = 0;      readData();      computeCorrelation(control.getInt("Maximum time interval, tau"));   }/** * Reads data. */   public void readData() {      JFileChooser chooser = new JFileChooser();      int returnVal = chooser.showOpenDialog(plotFrame);      if(returnVal == JFileChooser.APPROVE_OPTION) {         File f = chooser.getSelectedFile();         try {            BufferedReader in = new BufferedReader(new FileReader(f));            String s = in.readLine();  // read in first line which contains no data            s = in.readLine();  // read in second line which contains no data            s = in.readLine();  // read in third line which should contain magnetization data            while(!s.equals("Dataset 1")) {   // Dataset 1 starts energy data               // Create a StringTokenizer with a tab as a delimiter, valid for data from PlottingPanel               StringTokenizer st = new StringTokenizer(s, "\t" );               // covert string token to a Double and then a double               magnetization[(int)Double.valueOf(st.nextToken()).doubleValue()] = Double.valueOf(st.nextToken()).doubleValue();               s = in.readLine();               numberOfPoints++;            }            s = in.readLine(); // read first energy data point            while ( s != null ) {               StringTokenizer st = new StringTokenizer(s, "\t" );               energy[(int)Double.valueOf(st.nextToken()).doubleValue()] = Double.valueOf(st.nextToken()).doubleValue();               s = in.readLine();            }         } //end try         catch (Exception e) {            System.out.println ("Exception: " + e);         }      }  // end if   }/** * Computes and plots correlation functions * @param tauMax is the maximum time for correlation functions */   public void computeCorrelation(int tauMax) {      plotFrame.clearData();      double energyAccumulator = 0, magnetizationAccumulator = 0;      double energySquaredAccumulator = 0, magnetizationSquaredAccumulator = 0;      for(int t = 0; t < numberOfPoints; t++) {         energyAccumulator += energy[t];         magnetizationAccumulator += magnetization[t];         energySquaredAccumulator += energy[t]*energy[t];         magnetizationSquaredAccumulator += magnetization[t]*magnetization[t];      }      double averageEnergySquared = Math.pow(energyAccumulator/numberOfPoints, 2);      double averageMagnetizationSquared = Math.pow(magnetizationAccumulator/numberOfPoints,2);      // compute normalization factors      double normE = (energySquaredAccumulator/numberOfPoints) - averageEnergySquared;      double normM = (magnetizationSquaredAccumulator/numberOfPoints) - averageMagnetizationSquared;      for(int tau = 1; tau <= tauMax; tau++) {         double c_MAccumulator = 0;         double c_EAccumulator = 0;         int counter = 0;         for(int t = 0; t < numberOfPoints - tau; t++) {            c_MAccumulator += magnetization[t]*magnetization[t+tau];            c_EAccumulator += energy[t]*energy[t+tau];            counter++;         }         // correlation defined so that c(0) = 1 and c(infinity) -> 0         plotFrame.append(0,tau,((c_MAccumulator/counter) - averageMagnetizationSquared)/normM);         plotFrame.append(1,tau,((c_EAccumulator/counter) - averageEnergySquared)/normE);      }      plotFrame.setVisible(true);      control.println("Number of points = " + numberOfPoints);   }/** * Resets input parameter */   public void resetCalculation () {      control.setValue("Maximum time interval, tau", 20);   }  /**   * Starts Java application.   * @param args  command line parameters   */   public static void main(String args[]) {      CalculationControl.createApp(new AutoCorrelatorApp());   }}