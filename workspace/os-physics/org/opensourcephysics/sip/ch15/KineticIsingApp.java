package org.opensourcephysics.sip.ch15;import org.opensourcephysics.controls.*;import org.opensourcephysics.frames.*;/** * @author Jan Tobochnik, revise 12/20/04 */public class KineticIsingApp extends AbstractSimulation {  KineticIsing 		ising = new KineticIsing();  PlotFrame 		plotFrame = new PlotFrame("ln t", "ln r", "Data");  DisplayFrame  	displayFrame = new DisplayFrame("Kinetic Ising Model");  int Tmax;  int numberOfTrials;  int stepsBetweenPlots;  double rAccumulator[];  /**   * Constructs the KineticIsingApp.   *   */  public KineticIsingApp() {    displayFrame.addDrawable(ising);  }  /**   * Initializes the animation using the values in the control.   *   */  public void initialize() {      ising.temperature = control.getDouble("temperature");      ising.initialize(control.getInt("L"));      Tmax = control.getInt("Tmax");      rAccumulator = new double[Tmax];      numberOfTrials = 0;      displayFrame.setPreferredMinMax(-5, ising.L+5,-5,ising.L+5);  }  /**   * One Trial   */  public void doStep() {    ising.createRandomConfiguration();    int tData = 2;    for(int t = 0; t < Tmax; t++) {      ising.doOneMCStep();      if(t % stepsBetweenPlots == 0) displayFrame.show();      if(t == tData) {         rAccumulator[t] += 2.0/(2.0 + ((1.0*ising.energy)/ising.N));        // System.out.println(t + " " + rAccumulator[t]);         tData *= 2;      }    }    numberOfTrials++;    tData = 2;    plotFrame.clearData();    while (tData < Tmax) {        plotFrame.append(0,Math.log(tData),Math.log(rAccumulator[tData]/numberOfTrials));        //System.out.println(Math.log(tData) + " " + Math.log(rAccumulator[tData]/numberOfTrials));        tData *= 2;    }    control.clearMessages();    displayFrame.setMessage("numberOfTrials = " + numberOfTrials);   }  /**   * gets steps between plots   */   public void startRunning() { //       stepsBetweenPlots = control.getInt("Steps between plots");   }    /**   * Resets animation to a predefined state.   */  public void reset() {     control.setValue("L", 64);     control.setValue("temperature", 0.5);     control.setValue("Tmax", 128);     control.setAdjustableValue("Steps between plots", 10);   }  /**   * Start Java application.   * @param args  command line parameters   */  public static void main(String[] args) {    SimulationControl.createApp(new KineticIsingApp());  }}