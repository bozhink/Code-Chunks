/*  Creates percolation cluster with probability p and computes mass distribution */package  org.opensourcephysics.sip.ch13.cluster;import org.opensourcephysics.controls.AbstractAnimation;import org.opensourcephysics.controls.AnimationControl;import org.opensourcephysics.display.DataTable;import org.opensourcephysics.display.DataTableFrame;import org.opensourcephysics.display.DatasetManager;import org.opensourcephysics.display.DrawingFrame;import org.opensourcephysics.display.DrawingPanel;import org.opensourcephysics.display.PlottingPanel;public class ClusterApp extends AbstractAnimation {  Epidemic             model;  DrawingPanel      drawingPanel;  DrawingFrame      drawingFrame;  PlottingPanel     plottingPanel;  DrawingFrame      plottingFrame;  DatasetManager    datasetManager = new DatasetManager();  DataTable dataTable = new DataTable();  DataTableFrame tableFrame = new DataTableFrame("ln Distribution", dataTable);  int steps;public ClusterApp() {    model = new Epidemic();    plottingPanel = new PlottingPanel("ln r", "ln M", "Mass Distribution");    plottingPanel.setAutoscaleX(true);    plottingPanel.setAutoscaleY(true);    plottingPanel.addDrawable(datasetManager);    plottingFrame = new DrawingFrame(plottingPanel);    drawingPanel = new DrawingPanel();    drawingPanel.addDrawable(model);    drawingFrame  = new DrawingFrame(drawingPanel);    dataTable.add(datasetManager);}  public void initializeAnimation() {     model.L =  control.getInt("L");     model.p = control.getDouble("p");     model.initialize();     datasetManager.clear();     plottingPanel.render();     drawingPanel.setPreferredMinMax(-5, model.L+5,-5,model.L+5);     drawingPanel.render();  }  public void startAnimation() {     steps = control.getInt("Steps between drawing");     super.startAnimation();  }  public void doStep() {    for(int i = 0; i < steps; i++) model.step();    drawingPanel.render();  } public void stopAnimation() {      super.stopAnimation();      datasetManager.clear();      model.massDistribution();      double massEnclosed = 0;      int rPrint = 2;      for(int r = 2; r < model.L/2; r++) {        massEnclosed += model.mass[r];        if(r == rPrint) {  // use logarithmic scale           datasetManager.append(0, Math.log(r), Math.log(massEnclosed));           rPrint *= 2;        }      }      plottingPanel.render();      dataTable.refreshTable();      tableFrame.setVisible(true); } public void resetAnimation() {    control.setValue("L", 50);    control.setValue("p", 0.75);    control.setValue("Steps between drawing", 1);    datasetManager.clear();    plottingPanel.render(); }  public static void main (String[] args) {     ClusterApp app = new ClusterApp();     AnimationControl control = new AnimationControl(app);     //control.addButton("resetData","resetData");     app.setControl(control);  }}