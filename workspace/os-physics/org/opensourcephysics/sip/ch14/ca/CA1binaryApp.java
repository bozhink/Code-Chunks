/* One-Dimensional Cellular Automata  */package org.opensourcephysics.sip.ch14.ca;import org.opensourcephysics.controls.*;import org.opensourcephysics.display.*;import org.opensourcephysics.display2d.*;import javax.swing.*;import java.awt.geom.*;import java.awt.*;import java.util.*;public class CA1binaryApp extends AbstractCalculation { DrawingPanel      plottingPanel = new PlottingPanel("x","t","  "); DrawingFrame      frame = new DrawingFrame(plottingPanel); BinaryLattice     ca;  // cellular automata lattice int[] update = new int[8]; int[] row;public CA1binaryApp() {  frame.show();}public void calculate() {  int L = control.getInt("Lattice size");  int tMax = control.getInt("Maximum time");  ca = new BinaryLattice(L,tMax);  ca.setBlock(0,0,new int[L][tMax]);  plottingPanel.addDrawable(ca);  plottingPanel.setPreferredMinMaxX(0,L);  plottingPanel.setPreferredMinMaxY(0,tMax);  row  = new int[L];  setRule(control.getInt("Rule number"));  row[L/2] = 1;  ca.setRow(0,0,row);  for(int t = 1; t < tMax; t++) {   iterate(t-1,L);   ca.setRow(t,0,row);  }   plottingPanel.repaint(); }public void iterate(int t1, int L) { // update ends of lattice using periodic boundary conditions  row[0] = update[4*ca.getValue(L-1,t1) + 2*ca.getValue(0,t1) + ca.getValue(1,t1)];  row[L-1] = update[4*ca.getValue(L-2,t1) + 2*ca.getValue(L-1,t1) + ca.getValue(0,t1)]; //update rest of lattice  for(int i = 1; i < L-1; i++)    row[i] = update[4*ca.getValue(i-1,t1) + 2*ca.getValue(i,t1) + ca.getValue(i+1,t1)]; }public void setRule(int ruleNumber) {  int a = 256;  control.println("Rule = " + ruleNumber);  for(int i = 7; i >= 0; i--) {    update[i] = ruleNumber/a;    ruleNumber -= update[i]*a;    int bit2 = i/4;    int bit1 = (i - 4*bit2)/2;    int bit0 = i - 4*bit2 - 2*bit1;    a /= 2;    control.print(bit2 + "" + bit1 + "" + bit0 + "   ");   }   control.println();   for(int i = 7; i >= 0; i--)     control.print("  " + update[i] + "     ");   control.println(); }public void resetCalculation(){  super.resetCalculation();  control.setValue("Rule number", 90);  control.setValue("Maximum time", 100);  control.setValue("Lattice size", 500); }public static void main(String args[]) {  CA1binaryApp app = new CA1binaryApp();  Control control = new CalculationControl(app);  app.setControl(control);}}