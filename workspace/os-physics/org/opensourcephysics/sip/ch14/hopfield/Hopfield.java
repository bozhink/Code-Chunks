/* Implements Hopfiled model of a neural network */package org.opensourcephysics.sip.ch14.hopfield;import org.opensourcephysics.frames.*;import java.awt.*;public class Hopfield  {    LatticeFrame memory = new LatticeFrame("Hopfield");    int [][] connection;    int [] state;    int lx,ly,N;    int numberOfStoredMemories;       public Hopfield() {      memory.setToggleOnClick(true, 0, 1);      memory.setIndexedColor(0, Color.RED);      memory.setIndexedColor(1, Color.BLUE);   }   public void initialize() {      N = lx*ly;      connection = new int[N][N];      state = new int[N];      memory.resizeLattice(lx,ly);      numberOfStoredMemories = 0;   }   public void addMemory() {      int n = 0;      for(int j = 0; j < ly; j++) {         for(int i = 0; i < lx; i++) {            state[n] = memory.getValue (i,j);            n++;      }  }      for(int i = 0; i < N; i++) {         for(int j = 0; j < N; j++) {         if(i != j) {            connection[i][j] += (2*state[i] - 1)*(2*state[j] - 1);      }  }  }      numberOfStoredMemories++;    }   public void getInput() {      int n = 0;      for(int j = 0; j < ly; j++) {         for(int i = 0; i < lx; i++) {            state[n] = memory.getValue (i,j);            n++;      }  }   }   public void step() {      for(int k = 0; k < N; k++) {         int i = (int)(Math.random()*N);   // choose random neuron         int sum = 0;         for(int j = 0; j < N; j++) {            if(i != j) {               sum += connection[i][j]*state[j];            }            if(sum > 0) {               state[i] = 1;            }            else {               state[i] = 0;            }         }       }       int n = 0;       for(int j = 0; j < ly; j++) {          for(int i = 0; i < lx; i++) {               memory.setValue (i,j,state[n]);               n++;         }  }   }}