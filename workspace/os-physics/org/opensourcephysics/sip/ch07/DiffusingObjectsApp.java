/*  Creates  *//* * The org.opensourcephysics.sip.ch11 package contains classes for chapter 11, * Random Processes, of the book Simulations in Physics. * Copyright (c) 2002  H. Gould, J. Tobochnik, and W. Christian. */package  org.opensourcephysics.sip.ch07;import org.opensourcephysics.controls.*;import org.opensourcephysics.display.*;import java.io.*;/* Attempt to simulate model in PRL 266103, vol. 91 (2003)  Jesper Ferkinghoff-Berg, Mogens H. JensenJoachim Mathiesen, Poul Olesen and Kim Sneppen, "Competition between Diffusion and Fragmentation: AnImportant Evolutionary Process of Nature"*/public class DiffusingObjectsApp extends AbstractAnimation {  DiffusingObjects  model;  PlottingPanel     plottingPanel;  DrawingFrame      plottingFrame;  DatasetManager    datasetManager = new DatasetManager();  int stepsBetweenPlots;public DiffusingObjectsApp() {    model = new DiffusingObjects();    plottingPanel = new PlottingPanel("L", "N(L)", "Length Distribution");    plottingPanel.setAutoscaleX(true);    plottingPanel.setAutoscaleY(true);    plottingPanel.addDrawable(datasetManager);    plottingFrame = new DrawingFrame(plottingPanel);}  public void initializeAnimation() {     model.mass =  control.getInt("Total mass");     model.initialLength =  control.getInt("Initial length of most objects");     model.minimumLength =  control.getInt("Minimum length of an object");     model.DOverF = control.getInt("Diffusion steps per fragmentation");     stepsBetweenPlots =  control.getInt("Steps between plots");     model.initialize();     datasetManager.clear();     plottingPanel.render();  }  public void doStep() {    for(int i = 0; i < stepsBetweenPlots; i++) model.step();     datasetManager.clear();     int totalMass = 0;     for(int L = 1; L < model.mass; L++)        if(model.N[L] > 0) {          datasetManager.append(0,L, model.N[L]);          totalMass += L*model.N[L];        }     plottingPanel.render();     control.clearMessages();     control.println("Steps = " + model.steps + " mass = " + model.currentMass);  } public void resetAnimation() {    control.setValue("Total mass", 5000);    control.setValue("Initial length of most objects", 20);    control.setValue("Minimum length of an object", 5);    control.setValue("Diffusion steps per fragmentation", 10);    control.setValue("Steps between plots", 10);    datasetManager.clear();    plottingPanel.render(); }  public static void main (String[] args) {     DiffusingObjectsApp app = new DiffusingObjectsApp();     AnimationControl control = new AnimationControl(app);     app.setControl(control);  }}