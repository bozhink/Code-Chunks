using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;

namespace PenTagger
{
    class FileProcessor
    {
        private const string Charset = "utf-8";
        private const int MaxNumberOfFigures = 2000;
        private int [] figures;
        private string inputFileName;
        private string outputFileName;
        private int numberOfFigures, maxFigureNumber, numberOfFigPlates;
        private bool isMultipleFigures; // If there are multiple figures on a plate
        private string xml;

        public FileProcessor(string inputFileName, string outputFileName, int numberOfFigures)
        {
            this.inputFileName = inputFileName;
            this.outputFileName = outputFileName;
            this.numberOfFigures = numberOfFigures;
            figures = new int[this.numberOfFigures+1];
            isMultipleFigures = false;
        }

        public FileProcessor(string inputFileName, string outputFileName)
        {
            this.inputFileName = inputFileName;
            this.outputFileName = outputFileName;
            this.numberOfFigures = MaxNumberOfFigures;
            figures = new int[this.numberOfFigures+1];
            isMultipleFigures = false;
        }

        /// <summary>
        /// This method reads the inputFileName
        /// </summary>
        /// <returns>returns the inputFileName content</returns>
        public void GetContent()
        {
            StreamReader reader = null;
            Encoding encoding = Encoding.GetEncoding(Charset);
            string line = string.Empty;
            StringBuilder result = new StringBuilder();

            if (!File.Exists(inputFileName))
            {
                Console.WriteLine("File " + inputFileName + "not found.");
                return;
            }
            try
            {
                reader = new StreamReader(inputFileName, encoding);
                while ((line = reader.ReadLine()) != null)
                {
                    result.Append(line);
                    result.Append('\n');
                }
            }
            catch (IOException ioex)
            {
                Console.WriteLine("Can not read file " + inputFileName + ".");
                Console.WriteLine(ioex.Message);
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                Console.WriteLine("Argument out of range in the StringBuilder.");
                Console.WriteLine(aorex.Message);
            }
            finally
            {
                if (reader != null)
                {
                    reader.Close();
                }
            }
            // Remove all Carret Return (CR) symbols
            xml = Regex.Replace(result.ToString(), "\r", "");
        }

        public string GetXML()
        {
            return xml;
        }

        public void WriteXMLFile()
        {
            Encoding encoding = Encoding.GetEncoding(Charset);
            StreamWriter writer = null;
            try
            {
                writer = new StreamWriter(this.outputFileName, false, encoding);
                writer.Write(xml);
            }
            catch (IOException ioex)
            {
                Console.WriteLine("Can not write to file " + outputFileName + ".");
                Console.WriteLine(ioex.Message);
            }
            finally
            {
                if (writer != null)
                {
                    writer.Close();
                }
            }
        }

        public void TagYear()
        {
            xml = Regex.Replace(xml, "([^0-9](1[6-9][0-9]|20[0-1])[0-9])[^0-9]", "<xref>$1</xref>");
        }

        public void BoldItalic()
        {
            xml = Regex.Replace(xml, @"</bold>((\ ?)\s*)<bold>", "$2");
            xml = Regex.Replace(xml, @"</italic>((\ ?)\s*)<italic>", "$2");
            xml = Regex.Replace(xml, @"<bold>((\ ?)\s*)</bold>", "$2");
            xml = Regex.Replace(xml, @"<italic>((\ ?)\s*)</italic>", "$2");
            xml = Regex.Replace(xml, @"\&lt;\s*br\s*/\s*\&gt;</(italic|bold)>", "</$1>&lt;br/&gt;");
            xml = Regex.Replace(xml, @"([\.,;:\s]*)(</italic>)", "$2$1");
            xml = Regex.Replace(xml, @"(<italic>)([\.,;:\s]*)", "$2$1");
            xml = Regex.Replace(xml, @"\s+<bold>", " <bold>");
            xml = Regex.Replace(xml, @"(<italic>)(\w)(</italic>)(\.)", "$1$2$4$3");
            xml = Regex.Replace(xml, @"(</italic>|</bold>)(\w)", "$1 $2");
            xml = Regex.Replace(xml, @"(\w)(<italic>|<bold>)", "$1 $2");
            xml = Regex.Replace(xml, @"(\s*\(\s*)(</italic>|</bold>)", "$2$1");
            xml = Regex.Replace(xml, @"(<italic>|<bold>)(\s*\)\s*)", "$2$1");
            xml = Regex.Replace(xml, @"([,\.;:\-])(<italic>|<bold>)", "$1 $2");
            xml = Regex.Replace(xml, @"(</italic>|</bold>)\s+([,\.;:\-])", "$1$2");
            xml = Regex.Replace(xml, @"(</italic>)(<bold>)", "$1 $2");
            xml = Regex.Replace(xml, @"(</bold>)(<italic>)", "$1 $2");
            // Genus + species
            xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+)</italic>(\s*)<italic>([a-z\.\-]+)</italic>", "<italic>$1 $3</italic>");
            // Genus + species + subspecies
            xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+\s[a-z\.\-]+)</italic>(\s*)<italic>([a-z\.\-]+)</itallic>", "<italic>$1 $3</italic>");
            // Genus + (Subgenus)
            xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+)</italic>(\s*)\((\s*)<italic>([A-Z][a-z\.]+)</italic>(\s*)\)", "<italic>$1 ($4)</italic>");
            // Genus + (Subgenus) + species
            xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+\s\([A-Z][a-z\.]+\))</italic>(\s*)<italic>([a-z\.\-]+)</italic>", "<italic>$1 $3</italic>");
            // Genus + (Subgenus) + species + subspecies
            xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+\s\([A-Z][a-z\.]+\)\s[a-z\.\-]+)</italic>(\s*)<italic>([a-z\.\-]+)</italic>", "<italic>$1 $3</italic>");
            // sensu lato & sensu stricto
            xml = Regex.Replace(xml, @"<italic>([A-Za-z\.\(\)\s\-]+)\s*(sensu\s*[a-z\.]*)</italic>", "<italic>$1</italic> <italic>$2</italic>");
            xml = Regex.Replace(xml, @"<italic>([A-Za-z\.\(\)\s\-]+)\s*(s\.\s*[a-z\.]*)</italic>", "<italic>$1</italic> <italic>$2</italic>");
            xml = Regex.Replace(xml, @"<italic>(s(ensu|\.))\s*(l|s)</italic>\.", "<italic>$1 $3.</italic>");
            // Remove empty tags
            xml = Regex.Replace(xml, "(<italic></italic>|<bold></bold>|<source></source>|<sup></sup>)", "");
            // Paste some intervals
            xml = Regex.Replace(xml, "</italic><bold>", "</italic> <bold>");
            // Remove bold and italic around punctuation
            xml = Regex.Replace(xml, @"<(bold|italic)>([,;\.\-\:\s–])</(bold|italic)>", "$2");
            // Split multiple taxa in common italic
            //xml = Regex.Replace(xml, "<italic>([A-Za-z\\(\\)\\.\\s]+)([,;–\\-\\:]\\s*)(.*)</italic>", "<italic>$1</italic>$2<italic>$3</italic>");
            for (int i=0; i<6; i++)
            {
                // Genus[ species[ subspecies]]
                xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+([a-z\.\s]*[a-z])?)\s*([,;\.]\s*)([^<>]*)</italic>", "<italic>$1</italic>$3<italic>$4</italic>");
                // Genus (Subgenus)[ species[ subspecies]]
                xml = Regex.Replace(xml, @"<italic>([A-Z][a-z\.]+\s*\(\s*[A-Z][a-z\.]+\s*\)([a-z\.\s]*[a-z])?)\s*([,;\.]\s*)([^<>]*)</italic>", "<italic>$1</italic>$3<italic>$4</italic>");
            }
        }

        public void TitleLabel()
        {
            xml = Regex.Replace(xml, @"(<label>|<title>|<article\-title>|<kwd>|<p>)\s*", "$1");
            xml = Regex.Replace(xml, @"\s*(</label>|</title>|</article\-title>|</kwd>|</p>)", "$1");
            // Format some PageBreaks
            xml = Regex.Replace(xml, @"(\s*)(<kwd>[^\n]*)\s*(<!\-\-PageBreak\-\->)(</kwd>)", "$1$2$4$1$3");
            xml = Regex.Replace(xml, @"<(title|label|kwd|p)>\s*<!\-\-PageBreak\-\-></(title|label|kwd|p)>", "<!--PageBreak-->");

            UnboldTitle();
        }

        public void UnboldTitle()
        {
            Match m = Regex.Match(xml, @"<(title|label|article\-title)>(.*?)</(title|label|article\-title)>");
            while (m.Success)
            {
                string replace = Regex.Replace(m.Value, "(<bold>|</bold>)", "");
                xml = Regex.Replace(xml, Regex.Escape(m.Value), replace);
                m = m.NextMatch();
            }
        }

        public void FormatSection ()
        {
            xml = Regex.Replace(xml, @"(sec>)\s*(<title>)", "$1$2");
            xml = Regex.Replace(xml, @"\s*(</title>)", "$1");
            xml = Regex.Replace(xml, "sec><title>(.*?)</title>", "sec sec-type=\"$1\"><title>$1</title>");
            int numClearTags = 6;
            for (int i=0; i<numClearTags; i++)
            {
                ClearTagsInSectionAttributes();
            }
        }

        public void ClearMultipleBlanksInParagraph()
        {
            xml = Regex.Replace(xml, "(<p>)(.*?)\\s+(.*?)(</p>)", "$1$2 $3$4");
        }

        public void FormatCloseTags()
        {
            xml = Regex.Replace(xml, "(\\s*)</(label|title|p|mixed-citation|bold|italic|object-id|xref|kwd|td|ref|caption|th|tp:nomenclature-citation|article-title|self-uri|source|name|given-names|surname|person-group|year|month|day|volume|fpage|lpage|graphic)>", "</$2>");
        }

        public void FormatOpenTags()
        {
            xml = Regex.Replace(xml, "<(label|title|p|mixed-citation|bold|italic|object-id|xref|kwd|td|ref|caption|th|tp:nomenclature-citation|article-title|self-uri|source|name|given-names|surname|person-group|year|month|day|volume|fpage|lpage|graphic)([^>]*)>(\\s*)", "<$1$2>");
        }

        public void FormatPunctuation()
        {
            // Format brakets
            xml = Regex.Replace(xml, @"\s*\(\s+", " (");
            xml = Regex.Replace(xml, @"\s+\)\s*", ") ");
            xml = Regex.Replace(xml, @"(\)|\])\s+(\)|\])", "$1$2");
            xml = Regex.Replace(xml, @"(\(|\[)\s+(\(|\[)", "$1$2");
            // Format other punctuation
            xml = Regex.Replace(xml, @"\s+([,;:\.])", "$1 ");
            xml = Regex.Replace(xml, @"([,;:\.])\s+", "$1 ");
            xml = Regex.Replace(xml, @"([,\.\:\;])(<italic>|<bold>)", "$1 $2");
        }

        public void ExtractPageBreakFromReferences()
        {
            xml = Regex.Replace(xml, "((\\s*)<ref id=\"(\\w+)\">)([^\n]*)<!--PageBreak-->", "$2<!--PageBreak-->$1$4");
        }

        public void ExtractPageBreakFromItalic()
        {
            xml = Regex.Replace(xml, @"(<italic>([^\n]*?))<!--PageBreak-->", "<!--PageBreak-->$1");
        }

        public void FormatTaxons()
        {
            xml = Regex.Replace(xml, @"((\s*)<tp:taxon-name>)\s*([^\r]*?)\s*(</tp:taxon-name>)", "$1$2    $3$2$4");
            xml = Regex.Replace(xml, @"(<object-id[^>]*>)\s*([^\r]*?)\s*(</object-id>)", "$1$2$3");
            xml = Regex.Replace(xml, @"(<xref>)\s*([^\r]*?)\s*(</xref>)", "$1$2$3");
        }

        public void FormatTablesAndFigures()
        {
            xml = Regex.Replace(xml, "<table id=\"T(\\d+)\"( headerRowCount(.*?))>", "<table id=\"T$1\">");
            xml = Regex.Replace(xml, @"((\s*)<caption>)\s*", "$1$2    ");
            xml = Regex.Replace(xml, @"(<td ([^>]*)>)\s+", "$1");
            xml = Regex.Replace(xml, @"\s+(</td>)", "$1");
            xml = Regex.Replace(xml, "<table\\-wrap content\\-type=\"key\" position=\"float\"", "<table-wrap content-type=\"key\" position=\"anchor\"");
            xml = Regex.Replace(xml, "(\\s*)<tr>\\s*<td rowspan=\"1\" colspan=\"1\">\\s*<\\!\\-\\-PageBreak\\-\\->\\s*</td>\\s*</tr>", "$1<!--PageBreak-->");
            // Unbold key tables
            Match m = Regex.Match(xml, "(<table\\-wrap content\\-type=\"key\"[^>]*>)([^\r]*?)(?></table\\-wrap>)");
            while (m.Success)
            {
                string key = Regex.Replace(m.Value, "<bold>|</bold>", "");
                key = Regex.Replace(key, "(\\s*)(<td rowspan=\"1\" colspan=\"1\">)(<!\\-\\-PageBreak\\-\\->)", "$1$3$1$2");
                key = Regex.Replace(key, "(\\s*)(<td rowspan=\"1\" colspan=\"1\">)(–|\\-|\\d+)([A-Za-z])", "$1$2$3</td>$1$2$4");
                xml = Regex.Replace(xml, Regex.Escape(m.Value), key);
                m = m.NextMatch();
            }
            // Format wrong figures' labels
            xml = Regex.Replace(xml, @"(\s*)(<caption>)\s*(<p>)\s*<bold>\s*((Figure|Table).*?)\s*</bold>", "$1<label>$4</label>$1$2$3");
        }

        public void ClearTagsFromTags()
        {
            xml = Regex.Replace(xml, "(<[^<>]*)(<[^>]*>)([^<>]*)(</[^>]*>)([^>]*>)", "$1$3$5");
        }

/*
        public void TagWWW1()
        {
            //xml = Regex.Replace(xml, "(www\\.([a-z0-9]*[\\.\\-])*([a-z0-9]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\ ]*)?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"http://$1\">$1</ext-link>");
            xml = Regex.Replace(xml, "(([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.(com|net|org|info|eu|uk|us|cn)(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"http://$1\">$1</ext-link>");
            //xml = Regex.Replace(xml, "(<ext\\-link [^>]*>[^<]*)<ext\\-link [^>]*>([^<]*)</ext\\-link>([^<]*</ext\\-link>)", "$1$2$3");
            xml = Regex.Replace(xml, "((http(s?)|(s?)ftp)://)<ext\\-link [^>]*>([^<]*)</ext\\-link>", "$1$5");
            xml = Regex.Replace(xml, "(http(s?)://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
            xml = Regex.Replace(xml, "((s?)ftp://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
            
            int maxTagInTag = 10;
            for (int i=0; i<maxTagInTag; i++)
            {
                ClearTagsFromTags();
            }
            
            xml = Regex.Replace(xml, "(<article\\-id pub\\-id\\-type=\"doi\">)(<[^>]*>)([^<>]*)(</[^>]*>)(</article\\-id>)", "$1$3$5");
            xml = Regex.Replace(xml, "(<email xlink\\:type=\"simple\">)(<[^>]*>)([^<>]*)(</[^>]*>)(</email>)", "$1$3$5");
            xml = Regex.Replace(xml, "(<object\\-id xlink\\:type=\"simple\">[^<>]*)(<[^>]*>)([^<>]*)(</[^>]*>)([^<>]*</object\\-id>)", "$1$3$5");
            xml = Regex.Replace(xml, "(<(self\\-)?uri [^>]*>[^<>]*)<[^>]*>([^<>]*)</[^>]*>([^<>]*</(self\\-)?uri>)", "$1$3$4");
        }
*/

        public void TagWWW ()
        {
            Match mp = Regex.Match (xml, "<(p|th|td)>([^\n]*?)</(p|th|td)>");
            while (mp.Success) {
                string replace = mp.Value;
                replace = Regex.Replace (replace, "(([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.(com|net|org|info|eu|uk|us|cn|gov)(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"http://$1\">$1</ext-link>");
                replace = Regex.Replace (replace, "((http(s?)|(s?)ftp)://)<ext\\-link [^>]*>([^<]*)</ext\\-link>", "$1$5");
                replace = Regex.Replace (replace, "(http(s?)://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
                replace = Regex.Replace (replace, "((s?)ftp://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
                xml = Regex.Replace(xml, Regex.Escape(mp.Value), replace);
                mp = mp.NextMatch();
            }
            Match mr = Regex.Match (xml, "<mixed\\-citation [^>]*>([^\n]*)</mixed\\-citation>");
            while (mr.Success) {
                string replace = mr.Value;
                replace = Regex.Replace (replace, "(([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.(com|net|org|info|eu|uk|us|cn)(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"http://$1\">$1</ext-link>");
                replace = Regex.Replace (replace, "((http(s?)|(s?)ftp)://)<ext\\-link [^>]*>([^<]*)</ext\\-link>", "$1$5");
                replace = Regex.Replace (replace, "(http(s?)://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
                replace = Regex.Replace (replace, "((s?)ftp://([a-z0-9_]*[\\.:@\\-])*([a-z0-9_]+)\\.([a-z]{2,4})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
                xml = Regex.Replace(xml, Regex.Escape(mr.Value), replace);
                mr = mr.NextMatch();
            }
            // Tag IP addresses
            xml = Regex.Replace(xml, "(http(s?)://((\\d{1,3}\\.){3,3}\\d{1,3})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
            xml = Regex.Replace(xml, "((s?)ftp://((\\d{1,3}\\.){3,3}\\d{1,3})(:\\d+)?(/[^<>\n\"\\s]*[A-Za-z0-9/])?)", "<ext-link ext-link-type=\"uri\" xlink:href=\"$1\">$1</ext-link>");
            

            int maxTagInTag = 10;
            for (int i=0; i<maxTagInTag; i++)
            {
                ClearTagsFromTags();
            }

            xml = Regex.Replace(xml, "(<email xlink\\:type=\"simple\">)(<[^>]*>)([^<>]*)(</[^>]*>)(</email>)", "$1$3$5");
        }

        public void TagDOI()
        {
            // Remove blanks around brackets spanning numbers
            xml = Regex.Replace(xml, @"(\d)\s(\(|\[)([A-Z0-9]+)(\]|\))\s(\d)", "$1$2$3$4$5");
            // Tag DOI
            xml = Regex.Replace(xml, @"doi:(\s*)([^,<\s]*[A-Za-z0-9])", "doi: <ext-link ext-link-type=\"uri\" xlink:href=\"http://dx.doi.org/$2\">$2</ext-link>");
            // Some ormat
            xml = Regex.Replace(xml, "(</source>)(doi:)", "$1 $2");
        }

        public void GetFigures ()
        {
            Match m = Regex.Match(xml, @"<fig [^>]*>\s*<label>\s*(Figure|Plate)[^<]*</label>");
            int fig = 1;
            for (int i=0; i<numberOfFigures+1; i++)
            {
                figures[i]=0;
            }
            maxFigureNumber = 0;
            while (m.Success)
            {
                Match mfig = Regex.Match(m.Value, @"\d+");
                mfig = mfig.NextMatch(); // Skip the number in <fig id="F\d+"
                while (mfig.Success)
                {
                    try
                    {
                        int fign = int.Parse(mfig.Value);
                        figures[fign] = fig;
                        if (fign > maxFigureNumber) maxFigureNumber = fign;
                    }
                    catch (IndexOutOfRangeException e)
                    {
                        Console.WriteLine("The entered number of figures is insufficient!\n" + e.Message);
                        System.Environment.Exit(1);
                    }
                    //Console.WriteLine(mfig.Value + " " + mfig.Index);
                    mfig = mfig.NextMatch();
                }
                //Console.WriteLine(m.Value);
                m = m.NextMatch();
                fig++;
            }
            numberOfFigPlates = fig;
            isMultipleFigures = false;
            for (int i = 1; i <= maxFigureNumber; i++)
            {
                if (figures[i]==0) 
                {
                    figures[i] = figures[i-1];
                    isMultipleFigures = true;
                }
            }
            //for (int i=0; i<numberOfFigures+1; i++)
            for (int i=0; i<maxFigureNumber+1; i++)
            {
                Console.WriteLine("The figure #{0} is on plate #{1}", i, figures[i]);
            }
        }

        public void TagFiguresAndTables()
        {
            int maxNumberOfSequentalFloats = 30;
            int maxNumberOfPunctuationSigns = 10;
            // Force Fig. and Figs
            xml = Regex.Replace(xml, "(Fig)\\s", "$1. ");
            xml = Regex.Replace(xml, "(Figs)\\.", "$1");
            // Tag Figures and Tables
            xml = Regex.Replace (xml, "(Fig\\.|Figure|Map|Plate)\\s*(\\d+)(\\s*([A-Za-z]\\s*([,;\\-–]|and|\\&amp;)\\s*)*[A-Za-z])?(\\W)", "<xref ref-type=\"fig\" rid=\"F$2\">$1 $2$3</xref>$6");
            xml = Regex.Replace (xml, "(Tab\\.|Table)\\s*(\\d+)(\\s*([A-Za-z]?))(\\W)", "<xref ref-type=\"table\" rid=\"T$2\">$1 $2$3</xref>$5");
            xml = Regex.Replace (xml, "(Figs|Figures|Maps|Plates)\\s*(\\d+)(\\s*([A-Za-z]\\s*([,;\\-–]|and|\\&amp;)\\s*)*[A-Za-z])?(\\W)", "<xref ref-type=\"fig\" rid=\"F$2\">$1 $2$3</xref>$6");
            xml = Regex.Replace (xml, "(Tabs|Tables)\\s*(\\d+)(\\s*([A-Za-z]\\s*([,;\\-–]|and|\\&amp;)\\s*)*[A-Za-z])?(\\W)", "<xref ref-type=\"table\" rid=\"T$2\">$1 $2$3</xref>$6");
            for (int i=0; i<maxNumberOfSequentalFloats; i++)
            {
                xml = Regex.Replace (xml, "(<xref ref\\-type=\"fig\" [^>]*>[^<]*</xref>)(\\s*([,;\\-–]|and|\\&amp;)\\s*)(\\d+)(\\s*([A-Za-z]\\s*([,;\\-–]|and|\\&amp;)\\s*)*[A-Za-z])?(\\W)", "$1$2<xref ref-type=\"fig\" rid=\"F$4\">$4$5</xref>$8");
                xml = Regex.Replace (xml, "(<xref ref\\-type=\"table\" [^>]*>[^<]*</xref>)(\\s*([,;\\-–]|and|\\&amp;)\\s*)(\\d+)(\\s*([A-Za-z]\\s*([,;\\-–]|and|\\&amp;)\\s*)*[A-Za-z])?(\\W)", "$1$2<xref ref-type=\"table\" rid=\"T$4\">$4$5</xref>$8");
            }
            // Remove <xref> from titles and labels
            for (int i=0; i<maxNumberOfSequentalFloats; i++)
            {
                xml = Regex.Replace(xml, "(<label>|<title>)(.*)<xref([^>]*)>(.*)</xref>(.*)(</label>|</title>)", "$1$2$4$5$6");
            }
            // Format the content in <xref></xref>
            xml = Regex.Replace(xml, "(<xref [^>]*>[^<>]*\\d+)\\s+([A-Za-z][^<>]*</xref>)", "$1$2");
            for (int i=0; i<maxNumberOfPunctuationSigns; i++)
            {
                xml = Regex.Replace(xml, "(<xref [^>]*>[^<>]*[A-Za-z])\\s*([,;])\\s*([A-Za-z][^<>]*</xref>)", "$1$2 $3");
                xml = Regex.Replace(xml, "(<xref [^>]*>[^<>]*[A-Za-z])\\s*([\\-–])\\s*([A-Za-z][^<>]*</xref>)", "$1$2$3");
                xml = Regex.Replace(xml, "(<xref [^>]*>[^<>]*[A-Za-z])\\s*(and|\\&amp;)\\s*([A-Za-z][^<>]*</xref>)", "$1 $2 $3");
            }
            // Format content between </xref> and <xref
            xml = Regex.Replace(xml, "(</xref>)\\s*([\\-–])\\s*(<xref)", "$1$2$3");
            xml = Regex.Replace(xml, "(</xref>)\\s*([,;])\\s*(<xref)", "$1$2 $3");
            xml = Regex.Replace(xml, "(</xref>)\\s*(and|\\&amp;)\\s*(<xref)", "$1 $2 $3");
            //
            // If there are multiple figures on a plate change the rid of xrefs
            //
            string pattern="", replace="";
            if (isMultipleFigures)
            {
                for (int i = 1; i <= maxFigureNumber; i++)
                {
                    if (figures[i] != i)
                    {
                        pattern = "<xref ref\\-type=\"fig\" rid=\"F" + i + "\">";
                        replace = "<xref ref-type=\"fig\" rid=\"F" + figures[i] + "\">";
                        xml = Regex.Replace(xml, pattern, replace);
                    }
                }
            }
            for (int i = 1; i < numberOfFigPlates; i++)
            {
                pattern = "(<xref ref\\-type=\"fig\" rid=\"F" + i + "\">[^<]*)</xref>(\\,\\s*|\\;\\s*|\\s*\\-\\s*|\\s*–\\s*|\\s*and\\s*|\\s*\\&amp;\\s*)<xref ref\\-type=\"fig\" rid=\"F" + i + "\">([^<]*</xref>)";
                replace = "$1$2$3";
                for (int j = 0; j < maxNumberOfSequentalFloats; j++)
                {
                    xml = Regex.Replace(xml, pattern, replace);
                }
            }
            // Remove double <xref>
            xml = Regex.Replace(xml, "<xref>(<xref(.*?)</xref>)</xref>", "$1");
        }

        public void TagCoordinates()
        {
            // Format deg symbol
            xml = Regex.Replace(xml, "(\\d)([º°˚]|<sup>o</sup>)", "$1°");
            // Tag coordinates
            xml = Regex.Replace(xml, @"(\d+\.\d+[NSEW])\s*\,?\s*(\d+\.\d+[NSEW])", "<named-content content-type=\"dwc:verbatimCoordinates\">$1, $2</named-content>");
            xml = Regex.Replace(xml, @"((\d+\.)?\d+°[^<>]{0,20}?[SWNE][^A-Za-z]*?(\d+\.)?\d+°[^</>]{0,20}?[SWNE])", "<named-content content-type=\"dwc:verbatimCoordinates\">$1</named-content>");
            // Remove some blank spaces
            xml = Regex.Replace(xml, "(<named\\-content [^>]*>)([^<>]*)°\\s*([^<>]*)°\\s*([^<>]*)(</named\\-content>)", "$1$2°$3°$4$5");
        }

        public void ClearTagsInSectionAttributes()
        {
            xml = Regex.Replace(xml, "(?<=sec-type=\")(.*?)(<[^<]+?>)(.*?)(?=\")", "$1$3");
        }

        public void FormatSections()
        {
            xml = Regex.Replace(xml, "sec>(\\s*)<title>", "sec><title>");
            xml = Regex.Replace(xml, "sec><title>(.*?)</title>", "sec sec-type=\"$1\"><title>$1</title>");
            xml = Regex.Replace(xml, "([\\.:;])(\\s*?)\"><", "\"><");
            for (int i = 0; i < 6; i++)
            {
                xml = Regex.Replace(xml, "(?<=sec-type=\")(.*?)(<[^<]+?>)(.*?)(?=\")", "$1$3");
            }
            xml = Regex.Replace(xml, "treatment-sec sec-type=\"Distribution(.*?)\">", "treatment-sec sec-type=\"Distribution\">");
        }

        public void FormatReferances()
        {
            xml = Regex.Replace(xml, "<ref id=\"(\\d+)\"", "<ref id=\"B$1\"");
            xml = Regex.Replace(xml, @"([^\s])(<article\-title>)", "$1 $2");
            xml = Regex.Replace(xml, @"([^\s])(<source>)", "$1 $2");
            xml = Regex.Replace(xml, @"(</source>)([^\s])", "$1 $2");
            xml = Regex.Replace(xml, @"(</surname>)(\s*)(<given-names>)", "$1 $3");
        }

        public void InitialFormat()
        {
            //
            // Remove bold-italic tag
            //
            xml = Regex.Replace(xml, "<bold-italic>", "<bold><italic>");
            xml = Regex.Replace(xml, "</bold-italic>", "</italic></bold>");
            //
            // Remove fake-tags
            //
            xml = Regex.Replace(xml, "<fake_tag>", "<source>");
            xml = Regex.Replace(xml, "</fake_tag>", "</source> ");
            //
            // Figures and tables tag
            //
            xml = Regex.Replace(xml, "<(article_figs_and_tables)([^>]*)>", "<$1>");
            //
            // Remove blanks in front of close-tags and behind open-tags
            //
            FormatCloseTags();
            FormatOpenTags();
            //
            // Process bold and italic
            //
            BoldItalic();
            //
            // Remove bold from titles
            //
            TitleLabel();
            //
            // Sections
            //
            FormatSections();
            //
            // Insert some intervals
            //
            xml = Regex.Replace(xml, @"([^\(\[])\s*(<italic>|<bold>)\s*", "$1 $2");
            xml = Regex.Replace(xml, @"\s*(\(|\[)\s*(<italic>|<bold>|<underline>|<sub>|<sup>)\s*", " $1$2");
            xml = Regex.Replace(xml, @"(\s?)\s*?(</italic>|</bold>|</underline>|</sub>|</sup>)([^,;\)\]\.])", "$2$1$3");
            xml = Regex.Replace(xml, @"\s*(</italic>|</bold>|</underline>|</sub>|</sup>)\s*([,;\)\]\.])\s*", "$1$2 ");
            //
            // References
            //
            FormatReferances();
            //
            // Tables
            //
            FormatTablesAndFigures();
            //
            // Format PageBreaks
            //
            ExtractPageBreakFromItalic();
            ExtractPageBreakFromReferences();
            // Post-formatting
            for (int i = 0; i < 3; i++)
            {
                BoldItalic();
                FormatPunctuation();
                FormatCloseTags();
                FormatOpenTags();
            }
            xml = Regex.Replace(xml, @"(<bold>|<italic>)([,\.;\-–])(</bold>|</italic>)", "$2");
            // Clear empty symbols out of <article> tag
            xml = Regex.Replace(xml, @"(</article>)(\s*)", "$1");
            //
            xml = Regex.Replace(xml, @"<\s+/", "</");
        }

        public void FinalFormat()
        {
            Match mFront = Regex.Match(xml, "<front>([^\r]*)</front>");
            Match mBack = Regex.Match(xml, "<back>([^\r]*)</back>");
            string replace = mFront.Value;
            replace = Regex.Replace (replace, "((\\s*)<(publisher|title\\-group|pub\\-date[^>]*|permissions|kwd\\-group)>)(.*)", "$1$2    $4");
            replace = Regex.Replace (replace, "((\\s*)<name name\\-style=\"western\">)(<surname>(.*)</surname>) (<given\\-names>(.*)</given-names>)(</name>)", "$1$2    $3$2    $5$2$7");
            xml = Regex.Replace(xml, Regex.Escape(mFront.Value), replace);
            replace = Regex.Replace (mBack.Value, "((\\s*)<ref\\-list>)(.*)", "$1$2    $3");
            replace = Regex.Replace (replace, @"\s*<ack>\s*(<title>References</title>)\s*</ack>(\s*)(<ref\-list>)", "$2$3$2    $1");
            xml = Regex.Replace(xml, Regex.Escape(mBack.Value), replace);
            // Some body replaces
            xml = Regex.Replace(xml, @"((\s*)<tp:nomenclature\-citation\-list>)(<tp:nomenclature\-citation>)", "$1$2    $3");
            // Remove some empty tags
            xml = Regex.Replace(xml, "<source>\\s*</source>", "");
            // Remove empty lines
            xml = Regex.Replace(xml, @"\n\s*\n", "\n");
            // sensu lato & stricto
            xml = Regex.Replace(xml, @"(<italic>)((s\.|sens?u?)\s+[sl][a-z]*)(</italic>)\.", "$1$2.$4");
            //
            xml = Regex.Replace(xml, @"<\s+/", "</");
        }

        public void FormatTreatments()
        {
            string pattern, replace;
            xml = Regex.Replace(xml, @"(<tp:taxon-name>)\s*", "$1");
            xml = Regex.Replace(xml, @"\s*(</tp:taxon-name>)", "$1");
            repalce = "";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus species subspecies
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)\s+([a-z]+)\s+([a-z]+)</italic>\s*(.*?)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$5</tp:taxon-name-part>$2$7$2<taxon-authority-status>$6</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus species
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$4</tp:taxon-name-part>$2$6$2<taxon-authority-status>$5</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2$5$2<taxon-authority-status>$4</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus) species subspecies
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)\s+([a-z]+)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($4) </tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$5</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$6</tp:taxon-name-part>$2$8$2<taxon-authority-status>$7</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus) species
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($4) </tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$5</tp:taxon-name-part>$2$7$2<taxon-authority-status>$6</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus)
            pattern = @"((\s*)<tp:taxon-name>)<bold><italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$3</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($4) </tp:taxon-name-part>$2$6$2<taxon-authority-status>$5</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            //
            // The same with labels
            //
            // Genus species subspecies
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)\s+([a-z]+)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$5</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$6</tp:taxon-name-part>$2$8$2<taxon-authority-status>$7</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus species
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$5</tp:taxon-name-part>$2$7$2<taxon-authority-status>$6</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)</italic>\s*(.*)</bold>(</tp:taxon\-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2$6$2<taxon-authority-status>$5</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus) species subspecies
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)\s+([a-z]+)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($5) </tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$6</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$7</tp:taxon-name-part>$2$9$2<taxon-authority-status>$8</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus) species
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)\s+([a-z]+)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($5) </tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"species\">$6</tp:taxon-name-part>$2$8$2<taxon-authority-status>$7</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            // Genus (Subgenus)
            pattern = @"((\s*)<tp:taxon-name>)<bold>(.*)\s*<italic>([A-Z][a-z]*)\s+\(\s*([A-Z][a-z]+)\s*\)</italic>\s*(.*)</bold>(</tp:taxon-name>)";
            replace = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"genus\">$4</tp:taxon-name-part>$2    <tp:taxon-name-part taxon-name-part-type=\"subgenus\"> ($5) </tp:taxon-name-part>$2$7$2<taxon-authority-status>$6</taxon-authority-status>";
            xml = Regex.Replace(xml, pattern, replace);
            //
            // Higher taxa
            // See http://en.wikipedia.org/wiki/Taxonomic_rank#Terminations_of_names
            //
            string patternPrefix1 = "((\\s*)<tp:taxon\\-name>)<bold>\\s*([A-Z][a-z]*(";
            string patternPrefix2 = "((\\s*)<tp:taxon\\-name>)<bold>(.*?)\\s+([A-Z][a-z]*(";
            string patternSuffix = "))\\s*(.*?)</bold>(</tp:taxon\\-name>)";
            string replacePrefix1 = "$1$2    <tp:taxon-name-part taxon-name-part-type=\"";
            string replacePrefix2 = "$2<label>$3</label>$1$2    <tp:taxon-name-part taxon-name-part-type=\"";
            string replaceSuffix1 = "\">$3</tp:taxon-name-part>$2$6$2<taxon-authority-status>$5</taxon-authority-status>";
            string replaceSuffix2 = "\">$4</tp:taxon-name-part>$2$7$2<taxon-authority-status>$6</taxon-authority-status>";
            string taxon = "";
            string suffix = "";
            // Phylum
            taxon = "phylum";
            suffix = "phyta|mycota";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Subphylum
            taxon = "subphylum";
            suffix = "phytina|mycotina";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Class
            taxon = "class";
            suffix = "ia|opsida|phyceae|mycetes";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Subclass
            taxon = "subclass";
            suffix = "idae|phycidae|mycetidae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Superorder
            taxon = "superorder";
            suffix = "anae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Order
            taxon = "order";
            suffix = "ales";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Suborder
            taxon = "suborder";
            suffix = "ineae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Infraorder
            taxon = "infraorder";
            suffix = "aria";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Superfamily
            taxon = "superfamily";
            suffix = "acea|oidea";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Epifamily
            taxon = "epifamily";
            suffix = "oidae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Family
            taxon = "family";
            suffix = "aceae|idae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Subfamily
            taxon = "subfamily";
            suffix = "oideae|inae";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Infrafamily
            taxon = "infrafamily";
            suffix = "odd";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Tribe
            taxon = "tribe";
            suffix = "eae|ini";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Subtribe
            taxon = "subtribe";
            suffix = "inae|ina";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            // Infratribe
            taxon = "class";
            suffix = "ad";
            xml = Regex.Replace(xml, patternPrefix1+suffix+patternSuffix, replacePrefix1+taxon+replaceSuffix1);
            xml = Regex.Replace(xml, patternPrefix2+suffix+patternSuffix, replacePrefix2+taxon+replaceSuffix2);
            //
            // Split authority and status
            //
            UnboldTitle(); // For correction
            xml = Regex.Replace(xml, @"(<taxon\-authority\-status>)\s*<bold>", "$1"); // For correction
            xml = Regex.Replace(xml, @"<taxon\-authority\-status>((([a-z]+\.(\s*)(n|nov))|(n\.\s*[a-z]+)|(([a-z]+\.)?(\s*)spp))(\.)?)</taxon\-authority\-status>", "<tp:taxon-status>$1</tp:taxon-status>");
            xml = Regex.Replace(xml, @"(\s*)<taxon\-authority\-status>([\w\-\,\;\.\(\)\&\s-]+)(\s*\W\s*)([a-z]+\.\s*(n|nov)(\.)?)</taxon\-authority\-status>", "$1<tp:taxon-authority>$2</tp:taxon-authority>$1<tp:taxon-status>$4</tp:taxon-status>");
            xml = Regex.Replace(xml, @"<taxon\-authority\-status>([^\d]+\d{4,4})</taxon\-authority\-status>", "<tp:taxon-authority>$1</tp:taxon-authority>");
            xml = Regex.Replace(xml, @"<taxon\-authority\-status>(\([^\d]+\d{4,4}\))</taxon\-authority\-status>", "<tp:taxon-authority>$1</tp:taxon-authority>");
            xml = Regex.Replace(xml, @"<taxon\-authority\-status>(.*?)</taxon\-authority\-status>", "<tp:taxon-authority>$1</tp:taxon-authority>"); // For correction
            xml = Regex.Replace(xml, @"<tp:taxon\-authority>(.*)([\s,;:]+)</tp:taxon\-authority>", "<tp:taxon-authority>$1</tp:taxon-authority>");
        }

        public void TagLowerTaxa()
        {
            Match m = Regex.Match(xml, "<(p|th|td|title|tp:nomenclature\\-citation)[^>]*>[^\n]*?</(p|th|td|title|tp:nomenclature\\-citation)>");
            while (m.Success)
            {
                // Genus (Subgenus)? species subspecies?
                string newReplace = Regex.Replace(m.Value, @"<italic>([A-Z][a-z\.]+\s*[a-z-]*)</italic>", "<italic><tp:taxon-name>$1</tp:taxon-name></italic>");
                newReplace = Regex.Replace(newReplace, @"<italic>([A-Z][a-z\.]+\s*[a-z\.-]+\s*[a-z-]+)</italic>", "<italic><tp:taxon-name>$1</tp:taxon-name></italic>");
                newReplace = Regex.Replace(newReplace, @"<italic>([A-Z][a-z\.]+\s*\(\s*[A-Z][a-z\\.]+\s*\)\s*[a-z-]*)</italic>", "<italic><tp:taxon-name>$1</tp:taxon-name></italic>");
                newReplace = Regex.Replace(newReplace, @"<italic>([A-Z][a-z\.]+\s*\(\s*[A-Z][a-z\.]+\s*\)\s*[a-z\.-]+\s*[a-z-]+)</italic>", "<italic><tp:taxon-name>$1</tp:taxon-name></italic>");
                xml = Regex.Replace(xml, Regex.Escape(m.Value), newReplace);
                m = m.NextMatch();
            }
            //
            // Remove tp:taxon-name from some tags
            //
            xml = Regex.Replace(xml, "<tp:taxon\\-name>(((General|Features?|Chemistry|Holotype|Paratype|Lectotype|Pedipalps?|Prosoma|Morphology|Colou?ration|Chelicerae|Mesosoma|Metasoma|Head|Legs?|Head|Wings?|Antenna|Integument|Prodorsum|Notogaster|Gnathosoma|Anogenital|Labium|Prothorax|Colou?r|Male|Female|Structure|Measurements|Pilosity|Body|Pronotum|Scutellum|Fore|Thoracic|Abdomen|Pleonites?|Urosomite|Antennule|Mandibles|Maxillule|Maxilla|Maxilliped|Uropod|Pars)(\\s[^<]*?)?)|(In|Ex) situ)</tp:taxon\\-name>", "$1");
            //
            // Some final format
            Match m1 = Regex.Match(xml, @"(?<=<tp:taxon\-name>).*?(?=</tp:taxon\-name>)");
            while (m1.Success)
            {
                string replace = Regex.Replace(m1.Value, @"(\.)(\w)", "$1 $2");
                xml = Regex.Replace(xml, Regex.Escape(m1.Value), replace);
                m1 = m1.NextMatch();
            }
        }

        public void TagHigherTaxa()
        {
            string pattern = "(([A-Z][a-z]*(morpha|ieae|indeae|eriae|idea|ineae|aceae|oideae|oidea|oidae|idae|inae|odd|ini|ina|anae|ineae|acea|oideae|mycota|mycotina|mycetes|mycetidae|phyta|phytina|opsida|phyceae|idae|phycidae|ptera|poda|phaga|itae))|Insecta|Alismatales|Passeriformes|Porifera|Demospongiae|Hadromerida|Acari|Polydesmida|Hydrachnidia|Scorpiones|Oribatida)(\\W)";
            string replace = "<tp:taxon-name>$1</tp:taxon-name>$4";
            Match m = Regex.Match(xml, "<(p|th|td|title|tp:nomenclature\\-citation)[^>]*>[^\n]*?</(p|th|td|title|tp:nomenclature\\-citation)>");
            while (m.Success)
            {
                string newReplace = Regex.Replace(m.Value, pattern, replace);
                xml = Regex.Replace(xml, Regex.Escape(m.Value), newReplace);
                m = m.NextMatch();
            }
            for (int i=0; i<5; i++)
            {
                ClearTagsFromTags();
            }
            // Restore caused damages
            pattern = "<tp:taxon\\-name>(China|\\w*china|Sabina|Dodd|Mvini|Carolina|Wallacea|\\w*stina|Rosalina|Medina|Barina|Mal[vw]ina|Cat[ae]rina|Argentina|Molina|Neblina|Padina|Vagina)</tp:taxon\\-name>";
            replace = "$1";
            xml = Regex.Replace(xml, pattern, replace);
            pattern = "<tp:taxon\\-name>([^<>]*)<tp:taxon\\-name>([^<>]*)</tp:taxon\\-name>([^<>]*)</tp:taxon\\-name>";
            replace = "<tp:taxon-name>$1$2$3</tp:taxon-name>";
            xml = Regex.Replace(xml, pattern, replace);
        }

        public void SetTaxonRangsInTaxonNames()
        {
            Match lowerTaxa = Regex.Match(xml, @"<italic><tp:taxon\-name[^>]*>(.*?)</tp:taxon\-name></italic>");
            string replace ="";
            while (lowerTaxa.Success)
            {
                //Console.WriteLine(lowerTaxa.Value);
                replace = lowerTaxa.Value;
                // Genus species subspecies
                replace = Regex.Replace(replace, @"(<italic><tp:taxon\-name[^>]*>)([A-Z][a-z\.]+)\s+([a-z\.\-]+)\s+([a-z\.\-]+)(</tp:taxon\-name></italic>)", "$1<tp:taxon-name-part taxon-name-part-type=\"genus\">$2</tp:taxon-name-part> <tp:taxon-name-part taxon-name-part-type=\"species\">$3</tp:taxon-name-part> <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$4</tp:taxon-name-part>$5");
                // Genus species
                replace = Regex.Replace(replace, @"(<italic><tp:taxon\-name[^>]*>)([A-Z][a-z\.]+)\s+([a-z\.\-]+)(</tp:taxon\-name></italic>)", "$1<tp:taxon-name-part taxon-name-part-type=\"genus\">$2</tp:taxon-name-part> <tp:taxon-name-part taxon-name-part-type=\"species\">$3</tp:taxon-name-part>$4");
                // Genus (Subgenus) species subspecies
                replace = Regex.Replace(replace, @"(<italic><tp:taxon\-name[^>]*>)([A-Z][a-z\.]+)\s+\(\s*([A-Z][a-z\.]+)\s*\)\s+([a-z\.\-]+)\s+([a-z\.\-]+)(</tp:taxon\-name></italic>)", "$1<tp:taxon-name-part taxon-name-part-type=\"genus\">$2</tp:taxon-name-part> (<tp:taxon-name-part taxon-name-part-type=\"subgenus\">$3</tp:taxon-name-part>) <tp:taxon-name-part taxon-name-part-type=\"species\">$4</tp:taxon-name-part> <tp:taxon-name-part taxon-name-part-type=\"subspecies\">$5</tp:taxon-name-part>$6");
                // Genus (Subgenus) species
                replace = Regex.Replace(replace, @"(<italic><tp:taxon\-name[^>]*>)([A-Z][a-z\.]+)\s+\(\s*([A-Z][a-z\.]+)\s*\)\s+([a-z\.\-]+)(</tp:taxon\-name></italic>)", "$1<tp:taxon-name-part taxon-name-part-type=\"genus\">$2</tp:taxon-name-part> (<tp:taxon-name-part taxon-name-part-type=\"subgenus\">$3</tp:taxon-name-part>) <tp:taxon-name-part taxon-name-part-type=\"species\">$4</tp:taxon-name-part>$5");
                // Genus
                replace = Regex.Replace(replace, @"(<italic><tp:taxon\-name[^>]*>)([A-Z][a-z\.]+)(</tp:taxon\-name></italic>)", "$1<tp:taxon-name-part taxon-name-part-type=\"genus\">$2</tp:taxon-name-part>$3");
                xml = Regex.Replace(xml, Regex.Escape(lowerTaxa.Value), replace);
                lowerTaxa = lowerTaxa.NextMatch();
            }
        }

        public void UnFoldShortenedGenera()
        {
            Match m = Regex.Match(xml, @"(?<=(<tp:taxon\-name))(>[A-Z][a-z]*\.\s*[a-z\-]*?<)(?=/tp:taxon\-name>)");
            while (m.Success)
            {
                Match genus = Regex.Match(m.Value, @"(?<=>)[A-Z][a-z]*(?=\.)");
                Match species = Regex.Match(m.Value, @"(?<=\s)[a-z\-]+(?=<)");
                Console.WriteLine("\n{2}:\tGenus = {0}.\tSpecies = {1}", genus.Value, species.Value, m.Value);
                string find = "(?<=(<tp:taxon\\-name))(>" + genus.Value + "[a-z]+\\s*" + species.Value + "<)(?=/tp:taxon\\-name>)";
                Match getName = Regex.Match(xml, find);
                if (getName.Success)
                {
                    string replace = " unfold=\"true\"" + getName.Value;
                    Console.WriteLine("\tThe string \"{0}\" will be replaced by \"{1}\"", m.Value, replace);
                    xml = Regex.Replace(xml, Regex.Escape(m.Value), replace);
                }
                while (getName.Success)
                {
                    Console.WriteLine("\t\tMatch found:\t{0}", getName.Value);
                    getName = getName.NextMatch();
                }
                m = m.NextMatch();
            }
        }


        //private const string TaxonNamePrefix = "<tp:taxon-name>";
        //pricate const string TaxonNameSuffix = "</tp:taxon-name>";
        //private const string GenusNamePrefix = "<tp:taxon-name-part taxon-name-part-type=\"genus\">";
        //private const string SpeciesNamePrefix = "<tp:taxon-name-part taxon-name-part-type=\"species\">";
        //private const string TaxonNamePartSuffix = "</tp:taxon-name-part>";

        public void UnFoldShortenedGenera1()
        {
            Regex taxonName = new Regex(@"(?<=(<tp:taxon\-name[^>]*>))(.*?)(?=</tp:taxon\-name>)");
            Regex genusNameFull = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"genus\">)[A-Z][a-z]+(?=</tp:taxon-name-part>)");
            Regex genusNameShort = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"genus\">)[A-Z][a-z]*(?=\\.</tp:taxon-name-part>)");
            Regex subgenusNameFull = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"subgenus\">)[A-Z][a-z]+(?=</tp:taxon-name-part>)");
            Regex subgenusNameShort = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"subgenus\">)[A-Z][a-z]*(?=\\.</tp:taxon-name-part>)");
            Regex speciesNameFull = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"species\">)[a-z\\-]+(?=</tp:taxon-name-part>)");
            Regex speciesNameShort = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"species\">)[a-z\\-]+(?=\\.</tp:taxon-name-part>)");
            Regex subspeciesName = new Regex("(?<=<tp:taxon-name-part taxon-name-part-type=\"subspecies\">)[a-z\\-]+(?=</tp:taxon-name-part>)");// It is supposed there is no shortened subspecies names
            
            Match m = taxonName.Match(xml);
            while (m.Success)
            {
                //Match genus = Regex.Match(m.Value, "(?<=<tp:taxon-name-part taxon-name-part-type=\"genus\">)[A-Z][a-z]*(?=\\.)");
                Match genus = genusNameShort.Match(m.Value);
                Match species = speciesNameFull.Match(m.Value);
                if (genus.Success && species.Success)
                {
                    Console.WriteLine("\n{2}:\tGenus = {0}.\tSpecies = {1}", genus.Value, species.Value, m.Value);
                }
                /*
                string find = "(?<=(<tp:taxon\\-name))(>" + genus.Value + "[a-z]+\\s*" + species.Value + "<)(?=/tp:taxon\\-name>)";
                Match getName = Regex.Match(xml, find);
                if (getName.Success)
                {
                    string replace = " unfold=\"true\"" + getName.Value;
                    Console.WriteLine("\tThe string \"{0}\" will be replaced by \"{1}\"", m.Value, replace);
                    xml = Regex.Replace(xml, Regex.Escape(m.Value), replace);
                }
                while (getName.Success)
                {
                    Console.WriteLine("\t\tMatch found:\t{0}", getName.Value);
                    getName = getName.NextMatch();
                }
                */
                m = m.NextMatch();
            }
        }

        public void UnstableUnfold()
        {
            string genusPrefix = "<tp:taxon\\-name\\-part taxon\\-name\\-part\\-type=\"genus\">";
            string genusSuffix = "</tp:taxon-name-part>";
            string genusNPrefix = "(?<=" + genusPrefix + ")";
            string genusNSuffix = "(?=" + genusSuffix + ")";
            string genusSpeciesPattern = "<tp:taxon\\-name[^>]*?><tp:taxon\\-name\\-part taxon\\-name\\-part\\-type=\"genus\">[A-Z][a-z]*\\.</tp:taxon\\-name\\-part>\\s*<tp:taxon\\-name\\-part taxon\\-name\\-part\\-type=\"species\">.*?</tp:taxon\\-name\\-part></tp:taxon\\-name>";
            
            // Print all recognized genera in the article
            Console.WriteLine();
            Match genus = Regex.Match(xml, genusNPrefix + "[A-Z][a-z\\.]+?" + genusNSuffix);
            while (genus.Success)
            {
                Console.WriteLine("Found genus: {0}", genus.Value);
                genus = genus.NextMatch();
            }
            //
            Console.Write("\n\n\n\n\n");
            // Show only genera in the current paragraph
            Match genSp = Regex.Match(xml, genusSpeciesPattern);
            while (genSp.Success)
            {
                Match genusShort = Regex.Match(genSp.Value, genusNPrefix + "[A-Z][a-z]*?(?=\\.)");
                Match species = Regex.Match(genSp.Value, "(?<=<tp:taxon\\-name\\-part taxon\\-name\\-part\\-type=\"species\">).*?(?=<)");
                Console.WriteLine("Shortened species found:\t{0}. {1}\n", genusShort.Value, species.Value);
                
                Match paragraph = Regex.Match(xml, "<p>.*?" + Regex.Escape(genSp.Value));
                while (paragraph.Success)
                {
                    Console.WriteLine("Paragraph content:\n\t{0}\n", paragraph.Value);
                    string lastGenusFound = "";
                    bool isFound = false;
                    Match genusPar = Regex.Match(paragraph.Value, genusNPrefix + Regex.Escape(genusShort.Value) + "[a-z]+?" + genusNSuffix);
                    while (genusPar.Success)
                    {
                        isFound = true;
                        lastGenusFound = genusPar.Value;
                        Console.WriteLine("........ Found Genus in paragraph: {0}\n", lastGenusFound);
                        genusPar = genusPar.NextMatch();
                    }
                    if (isFound)
                    {
                        Console.WriteLine("\n\tSpecies name '{0}. {1}' will be replaced by '{2} {1}' in the current paragraph.\n", genusShort.Value, species.Value, lastGenusFound);
                        string replace = Regex.Replace(paragraph.Value, ">" + genusPrefix + genusShort.Value + "\\." + genusSuffix, " unfold=\"true\"><tp:taxon-name-part taxon-name-part-type=\"genus\">" + lastGenusFound + "</tp:taxon-name-part>");
                        xml = Regex.Replace(xml, Regex.Escape(paragraph.Value), replace);
                    }
                    else
                    {
                        Console.WriteLine("\n\tNo suitable genus name has been found in the current paragraph.\n");
                    }
                    
                    paragraph = paragraph.NextMatch();
                }
                Console.WriteLine("\n");
                genSp = genSp.NextMatch();
            }
            UnFoldShortenedGenera1();
        }

        /*
         * Cross-ref renumeration method
         */
        public void CrossRef()
        {
            int i=0;
            Match m = Regex.Match(xml, "<citation key=\"ref\\d+\">(.*?)</citation>");
            while (m.Success)
            {
                string replace = Regex.Replace(m.Value, "<citation key=\"ref\\d+\">", "<citation key=\"ref" + (++i) +"\">");
                xml = Regex.Replace(xml, Regex.Escape(m.Value), replace);
                m = m.NextMatch();
            }
        }
    }
}
