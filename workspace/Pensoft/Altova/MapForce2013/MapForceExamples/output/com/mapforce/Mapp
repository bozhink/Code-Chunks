/**
 * MappingMapToAltova_Hierarchical3.java
 *
 * This file was generated by MapForce 2013r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToAltova_Hierarchical3 extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_FileList;
	
		public main(com.altova.mapforce.IMFNode var1_instance_FileList)
		{
			this.var1_instance_FileList = var1_instance_FileList;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			javax.xml.namespace.QName var2_create_qname;
			javax.xml.namespace.QName var3_create_qname;
			javax.xml.namespace.QName var4_create_qname;
			com.altova.mapforce.IEnumerable var5_filter_elements_qname;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				var2_create_qname = com.altova.functions.Core.createQName("Name", "");
				var3_create_qname = com.altova.functions.Core.createQName("PrimaryKey", "");
				var4_create_qname = com.altova.functions.Core.createQName("Altova", "");
				var5_filter_elements_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("FileList", ""), closure.var1_instance_FileList));
				current = com.altova.functions.Core.createElement(var4_create_qname, (new seq1_join(var3_create_qname, var2_create_qname, var5_filter_elements_qname, var4_create_qname)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		javax.xml.namespace.QName var2_create_qname;
		com.altova.mapforce.IEnumerable var3_filter_elements_qname;
		javax.xml.namespace.QName var5_create_qname;
	
		public seq1_join(javax.xml.namespace.QName var1_create_qname, javax.xml.namespace.QName var2_create_qname, com.altova.mapforce.IEnumerable var3_filter_elements_qname, javax.xml.namespace.QName var5_create_qname)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_create_qname = var2_create_qname;
			this.var3_filter_elements_qname = var3_filter_elements_qname;
			this.var5_create_qname = var5_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var4_filter_elements_qname;
			IEnumerator var6_filter;
			IEnumerator var7_filter_elements_qname;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("Altova_Hierarchical.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(closure.var1_create_qname, com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.parseInteger("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement(closure.var2_create_qname, com.altova.functions.Core.box("Organization Chart"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!(com.altova.functions.Core.exists(closure.var3_filter_elements_qname))) {state = 0; return false; }
				var4_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("File", ""), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_elements_qname))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_filter_elements_qname.moveNext()) {state = 7; return false; }
				var6_filter = ((new seq2_filter(((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current())), closure.var5_create_qname))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var6_filter.moveNext()) {state = 9; return false; }
				var7_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Office", ""), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var5_create_qname, ((com.altova.mapforce.IMFNode)(var6_filter.current())))))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				var6_filter.close(); var6_filter = null;
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 10;				
				if (!var7_filter_elements_qname.moveNext()) {state = 11; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Office", ""), (new seq4_seq_(closure.var1_create_qname, ((com.altova.mapforce.IMFNode)(var7_filter_elements_qname.current())), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current())), closure.var2_create_qname)));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				var7_filter_elements_qname.close(); var7_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var7_filter_elements_qname.close(); var7_filter_elements_qname = null;
				var6_filter.close(); var6_filter = null;
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		javax.xml.namespace.QName var3_create_qname;
	
		public seq2_filter(com.altova.mapforce.IMFNode var1_current, javax.xml.namespace.QName var3_create_qname)
		{
			this.var1_current = var1_current;
			this.var3_create_qname = var3_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_filter closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			public Enumerator(seq2_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_if_is_filename_with_wildcard = ((new seq3_if_is_filename_with_wildcard(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(closure.var3_create_qname, ((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current())))))) {state = 2; return false; }
				current = var2_if_is_filename_with_wildcard.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_if_is_filename_with_wildcard implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq3_if_is_filename_with_wildcard(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_if_is_filename_with_wildcard closure;
			IEnumerator var2_resolve_filename;
			com.altova.mapforce.IMFNode var4_instance;
			com.altova.mapforce.IMFNode var3_instance;
			public Enumerator(seq3_if_is_filename_with_wildcard closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				if (!(com.mapforce.core.is_filename_with_wildcard.eval(com.mapforce.core.resolve_wildcard_internal.eval(com.altova.functions.Core.substring("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.mapforce.core.get_position_of_last_delimiter.eval("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", "/", "\\"))), com.altova.CoreTypes.nodeToString(closure.var1_current))))) {state = 2; return false; }
				var2_resolve_filename = (com.altova.functions.Core.resolveFilename(com.mapforce.core.resolve_wildcard_internal.eval(com.altova.functions.Core.substring("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.mapforce.core.get_position_of_last_delimiter.eval("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", "/", "\\"))), com.altova.CoreTypes.nodeToString(closure.var1_current)))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				{
							com.altova.io.Input file = com.altova.io.StreamInput.createInput(com.mapforce.core.resolve_wildcard_internal.eval(com.altova.functions.Core.substring("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.mapforce.core.get_position_of_last_delimiter.eval("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", "/", "\\"))), com.altova.CoreTypes.nodeToString(closure.var1_current)));
							var4_instance = new com.altova.xml.DOMDocumentAsMFNodeAdapter(XmlTreeOperations.loadDocument(file), file.getFilename());
							file.close();
				}
				current = var4_instance;
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_resolve_filename.moveNext()) {state = 4; return false; }
				{
							com.altova.io.Input file = com.altova.io.StreamInput.createInput(((java.lang.String)(var2_resolve_filename.current())));
							var3_instance = new com.altova.xml.DOMDocumentAsMFNodeAdapter(XmlTreeOperations.loadDocument(file), file.getFilename());
							file.close();
				}
				current = var3_instance;
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_resolve_filename.close(); var2_resolve_filename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_resolve_filename.close(); var2_resolve_filename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_seq_ implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		com.altova.mapforce.IMFNode var2_current;
		com.altova.mapforce.IMFNode var3_current;
		javax.xml.namespace.QName var4_create_qname;
	
		public seq4_seq_(javax.xml.namespace.QName var1_create_qname, com.altova.mapforce.IMFNode var2_current, com.altova.mapforce.IMFNode var3_current, javax.xml.namespace.QName var4_create_qname)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_current = var2_current;
			this.var3_current = var3_current;
			this.var4_create_qname = var4_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_seq_ closure;
			public Enumerator(seq4_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement(closure.var1_create_qname, (new seq5_if_if_exists(closure.var1_create_qname, closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ForeignKey", ""), (new seq7_if_if_exists(closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Desc", ""), com.altova.functions.Core.box(com.altova.functions.Core.concat("read from file: ", com.mapforce.core.resolve_wildcard_internal.eval(com.altova.functions.Core.substring("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.mapforce.core.get_position_of_last_delimiter.eval("C:\\Users\\Bozhin Karaivanov\\Documents\\Altova\\MapForce2013\\MapForceExamples\\MergeMultipleFiles_List.mfd", "/", "\\"))), com.altova.CoreTypes.nodeToString(closure.var3_current)))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("EMail", ""), (new seq9_if_if_exists(closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Established", ""), (new seq11_if_if_exists(closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Fax", ""), (new seq13_if_if_exists(closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = com.altova.functions.Core.createElement(closure.var4_create_qname, (new seq15_if_if_exists(closure.var4_create_qname, closure.var2_current)));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Phone", ""), (new seq17_if_if_exists(closure.var2_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_if_if_exists implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq5_if_if_exists(javax.xml.namespace.QName var1_create_qname, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_if_if_exists closure;
			public Enumerator(seq5_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq6_if_exists(closure.var1_create_qname, closure.var2_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToString(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_if_exists implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq6_if_exists(javax.xml.namespace.QName var1_create_qname, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_if_exists closure;
			public Enumerator(seq6_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq7_if_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_if_if_exists closure;
			public Enumerator(seq7_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq8_if_exists(closure.var1_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.integerToString(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("ForeignKey", ""), closure.var1_current)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq8_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_if_exists closure;
			public Enumerator(seq8_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("ForeignKey", ""), closure.var1_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("ForeignKey", ""), closure.var1_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq9_if_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_if_if_exists closure;
			public Enumerator(seq9_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq10_if_exists(closure.var1_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("EMail", ""), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq10_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_if_exists closure;
			public Enumerator(seq10_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("EMail", ""), closure.var1_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("EMail", ""), closure.var1_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq11_if_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_if_if_exists closure;
			public Enumerator(seq11_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq12_if_exists(closure.var1_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Established", ""), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq12_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_if_exists closure;
			public Enumerator(seq12_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Established", ""), closure.var1_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Established", ""), closure.var1_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq13_if_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_if_if_exists closure;
			public Enumerator(seq13_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_exists(closure.var1_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Fax", ""), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq14_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_if_exists closure;
			public Enumerator(seq14_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Fax", ""), closure.var1_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Fax", ""), closure.var1_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_if_if_exists implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq15_if_if_exists(javax.xml.namespace.QName var1_create_qname, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_if_if_exists closure;
			public Enumerator(seq15_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq16_if_exists(closure.var1_create_qname, closure.var2_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_if_exists implements IEnumerable
	{
		javax.xml.namespace.QName var1_create_qname;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq16_if_exists(javax.xml.namespace.QName var1_create_qname, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_create_qname = var1_create_qname;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_if_exists closure;
			public Enumerator(seq16_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(closure.var1_create_qname, closure.var2_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_if_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq17_if_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_if_if_exists closure;
			public Enumerator(seq17_if_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq18_if_exists(closure.var1_current))))) {state = 2; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:nil", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Phone", ""), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_if_exists implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq18_if_exists(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_if_exists closure;
			public Enumerator(seq18_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Phone", ""), closure.var1_current)))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Phone", ""), closure.var1_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_FileList;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_FileList)
		{
			this.var1_instance_FileList = var1_instance_FileList;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_instance_FileList))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_box.close(); var2_box = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_box.close(); var2_box = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node varFileList2Instance;

	public void run(String FileList2SourceFilename, String Altova_Hierarchical7TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + FileList2SourceFilename + "...\n");
		com.altova.io.FileInput FileList2Source = new com.altova.io.FileInput(FileList2SourceFilename);
		// open target stream
		com.altova.io.FileOutput Altova_Hierarchical7Target = new com.altova.io.FileOutput(Altova_Hierarchical7TargetFilename);

		// run
		run(FileList2Source, Altova_Hierarchical7Target);

		// close source streams
		FileList2Source.close();
		// close target stream
		writeTrace("Saving " + Altova_Hierarchical7TargetFilename + "...\n");
		Altova_Hierarchical7Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input FileList2Source, com.altova.io.Output Altova_Hierarchical7Target) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_FileList2 = XmlTreeOperations.loadDocument(FileList2Source);
		varFileList2Instance = doc_FileList2;
		if (runDoesCloseAll)
			FileList2Source.close();

		// Create the target
		org.w3c.dom.Document Altova_Hierarchical7Doc = (Altova_Hierarchical7Target.getType() == com.altova.io.Output.IO_DOM) ? Altova_Hierarchical7Target.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varFileList2Instance, FileList2Source.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, Altova_Hierarchical7Doc);
		// Close the target
		XmlTreeOperations.saveDocument(Altova_Hierarchical7Doc, Altova_Hierarchical7Target, "UTF-8", false, false, true);

		
		if (runDoesCloseAll)
		{
			FileList2Source.close();
			Altova_Hierarchical7Target.close();
		}
	}



}
