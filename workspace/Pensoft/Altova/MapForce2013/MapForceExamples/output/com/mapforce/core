/**
 * core/resolve_wildcard_internal.java
 *
 * This file was generated by MapForce 2013r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce.core;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class resolve_wildcard_internal extends com.altova.TraceProvider 
{

	
	static class main implements IEnumerable
	{
		java.lang.String var1_basefolder;
		java.lang.String var2_filepath;
	
		public main(java.lang.String var1_basefolder, java.lang.String var2_filepath)
		{
			this.var1_basefolder = var1_basefolder;
			this.var2_filepath = var2_filepath;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			int var3_string_length;
			long var4_cast;
			long var5_cast;
			java.math.BigInteger var6_cast;
			java.math.BigDecimal var7_cast;
			java.math.BigInteger var8_cast;
			java.math.BigDecimal var9_cast;
			double var10_cast;
			boolean var11_equal;
			java.lang.String var12_substring;
			boolean var13_equal;
			boolean var14_equal;
			boolean var15_logical_or;
			boolean var16_logical_or;
			java.lang.String var17_if_logical_or;
			java.lang.String var20_eliminate_dot_in_filepath;
			java.math.BigDecimal var18_add;
			java.lang.String var19_substring;
			java.lang.String var21_get_path_delimiter_from_two_paths;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.mapforce.core.is_relative_filepath.eval(closure.var2_filepath))) {state = 3; return false; }
				var3_string_length = com.altova.functions.Core.stringLength(closure.var1_basefolder);
				var4_cast = com.altova.CoreTypes.intToLong(0);
				var5_cast = com.altova.CoreTypes.intToLong(var3_string_length);
				var6_cast = com.altova.CoreTypes.longToInteger(var4_cast);
				var7_cast = com.altova.CoreTypes.integerToDecimal(var6_cast);
				var8_cast = com.altova.CoreTypes.longToInteger(var5_cast);
				var9_cast = com.altova.CoreTypes.integerToDecimal(var8_cast);
				var10_cast = com.altova.CoreTypes.integerToDouble(var8_cast);
				var11_equal = com.altova.functions.Core.equal(var9_cast, var7_cast);
				var12_substring = com.altova.functions.Core.substring(closure.var1_basefolder, var10_cast, com.altova.CoreTypes.parseDouble("1"));
				var13_equal = com.altova.functions.Core.equal(var12_substring, "/");
				var14_equal = com.altova.functions.Core.equal(var12_substring, "\\");
				var15_logical_or = com.altova.functions.Core.logicalOr(var14_equal, var13_equal);
				var16_logical_or = com.altova.functions.Core.logicalOr(var11_equal, var15_logical_or);
				var17_if_logical_or = (java.lang.String)com.altova.functions.Core.first((new seq1_if_logical_or(var16_logical_or, closure.var1_basefolder, closure.var2_filepath)));
				if (!(com.altova.functions.Core.logicalOr(com.altova.functions.Core.startsWith(closure.var2_filepath, "\\"), com.altova.functions.Core.startsWith(closure.var2_filepath, "/")))) {state = 4; return false; }
				if (!(com.altova.functions.Core.contains(var17_if_logical_or, "://"))) {state = 5; return false; }
				var18_add = com.altova.functions.Core.add(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(com.altova.functions.Core.substringBefore(var17_if_logical_or, "://"))))), new java.math.BigDecimal("3"));
				var19_substring = com.altova.functions.Core.substring(var17_if_logical_or, com.altova.CoreTypes.decimalToDouble(var18_add), com.altova.CoreTypes.integerToDouble(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(var17_if_logical_or)))));
				if (!(com.altova.functions.Core.contains(var19_substring, "/"))) {state = 6; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.substring(var17_if_logical_or, com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.add(var18_add, com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(com.altova.functions.Core.substringBefore(var19_substring, "/")))))))), closure.var2_filepath);
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = closure.var2_filepath;
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var20_eliminate_dot_in_filepath = com.mapforce.core.eliminate_dot_in_filepath.eval(closure.var2_filepath);
				if (!(com.altova.functions.Core.startsWith(var20_eliminate_dot_in_filepath, ".."))) {state = 16; return false; }
				var21_get_path_delimiter_from_two_paths = com.mapforce.core.get_path_delimiter_from_two_paths.eval(closure.var1_basefolder, closure.var2_filepath);
				current = com.mapforce.core.eliminate_dot_dot_in_filepath.eval(var17_if_logical_or, var20_eliminate_dot_in_filepath, var21_get_path_delimiter_from_two_paths);
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.contains(var17_if_logical_or, ":"))) {state = 11; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.substring(var17_if_logical_or, com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.add(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(com.altova.functions.Core.substringBefore(var17_if_logical_or, ":"))))), new java.math.BigDecimal("1")))), closure.var2_filepath);
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var17_if_logical_or, com.altova.functions.Core.substring(closure.var2_filepath, com.altova.CoreTypes.integerToDouble(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(closure.var2_filepath)))), com.altova.CoreTypes.parseDouble("2")));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = closure.var2_filepath;
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(var17_if_logical_or, var20_eliminate_dot_in_filepath);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_if_logical_or implements IEnumerable
	{
		boolean var1_logical_or;
		java.lang.String var2_basefolder;
		java.lang.String var3_filepath;
	
		public seq1_if_logical_or(boolean var1_logical_or, java.lang.String var2_basefolder, java.lang.String var3_filepath)
		{
			this.var1_logical_or = var1_logical_or;
			this.var2_basefolder = var2_basefolder;
			this.var3_filepath = var3_filepath;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_if_logical_or closure;
			public Enumerator(seq1_if_logical_or closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_logical_or)) {state = 2; return false; }
				current = closure.var2_basefolder;
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.concat(closure.var2_basefolder, com.mapforce.core.get_path_delimiter_from_two_paths.eval(closure.var2_basefolder, closure.var3_filepath));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances


	public static IEnumerable create(java.lang.String var1_basefolder, java.lang.String var2_filepath)
	{
		return new main(
			var1_basefolder,
			var2_filepath
			);

	}
	

	public static java.lang.String eval(java.lang.String var1_basefolder, java.lang.String var2_filepath) throws java.lang.Exception
	{

		com.altova.mapforce.IEnumerator e = create(var1_basefolder,var2_filepath).enumerator();
		if (e.moveNext())
		{
			java.lang.String result = ((java.lang.String)e.current());
			e.close();
			return result;
		}
		e.close();
		throw new com.altova.AltovaException("Expected a function result.");		
	
	}

}
