/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.09.0 ] */

/* [wxMaxima: section start ]
Common constants and functions
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
eye2 : matrix([1,0],[0,1])$
Sp(A) := A[1][1] + A[2][2]$
c_pow_L(C, L) := (c_new:C, for i from 2 thru L do (c_new:c_new.C), c_new)$
av_tau(D, C, L) := if L>1 then Sp(D.c_pow_L(C,L-1)) / Sp(c_pow_L(C,L)) else 0$
PolyN(n,x,y) := sum(x^k*y^(n-k),k,0,n)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
PolyN(21,x,y)*(y-x);
expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Common results for 2 x 2 matrix
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Common form of a 2 x 2 matrix
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
C : matrix([a,b],[c,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Eigenvalues and eigenvectors.
The two eigenvectors here are not normalized and are not orthogonal
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[xvals, xvecs] : eigenvectors( C )$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lambda_1 : xvals[1][1];
u : xvecs[1][1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lambda_2 : xvals[1][2];
v : xvecs[2][1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(u.u);
radcan(v.v);
radcan(u.v);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now we can rewrite the eigenvectors using new eigenvalues notation: lambda -> eta

eta_1 == lambda_1
eta_2 == lambda_2

and here we can normalize the eigenvectors u and v
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u : matrix([1, -eta[2]/b])$
u : radcan(u / sqrt(u.u));
v : matrix([1, -eta[1]/b])$
v : radcan(v / sqrt(v.v));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(u.u);
radcan(v.v);
radcan(u.v);
factor(
  subst(2*b*c+a^2, eta[1]^2+eta[2]^2, 
    subst(b^2*c^2, eta[1]^2*eta[2]^2,
      subst(-b*c, eta[1]*eta[2], %))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(lambda_1^2+lambda_2^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now we can express the C-matrix by its eigenvalues
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(lambda_1+lambda_2) = eta[1]+eta[2];
radcan(lambda_1*lambda_2) = eta[1]*eta[2];
solve([eta[1]*eta[2] = -b*c], [c]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
CC : subst(eta[1]+eta[2], a, C)$
CC : subst(-eta[1]*eta[2]/b, c, subst(eta[1]+eta[2], a, C));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Eigenvector check for CC matrix and normalized vectors u and v
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
(CC-eta[1]*eye2) . transpose(u) $ factor(radcan(%));
(CC-eta[2]*eye2) . transpose(v) $ factor(radcan(%));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we define vector w, orthogonal to vector u.
Here w_anorm is the non-normalized initial version of w
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_anorm : alpha*u + beta * v;
w_alpha_beta : solve([factor(radcan(w_anorm.u)) = 0], [alpha,beta]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
w_alpha : 1;
w_beta  : factor(subst(1, %r1, rhs(w_alpha_beta[1][2])));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we have wector w, orthogonal to vector u
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_anorm : factor(radcan(w_alpha * u + w_beta * v));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and we must normalize it
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_norm_factor : sqrt(radcan(w_anorm.w_anorm))$
w : radcan(w_anorm / w_norm_factor);
w_Alpha : radcan(w_alpha / w_norm_factor);
w_Beta  : radcan(w_beta / w_norm_factor);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
w = radcan( w_Alpha * u + w_Beta *v );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(w.w);
radcan(w.u);
radcan(v.w);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we can substitute eta-values with their lambda-values,
defining new corresponding vectors w -> ww, u -> uu
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
"u" = u;
"w" = w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ww : factor(radcan(subst(lambda_2, eta[2], subst(lambda_1, eta[1], w))));
uu : factor(radcan(subst(lambda_2, eta[2], subst(lambda_1, eta[1], u))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Orthonormality check
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(ww.ww);
radcan(uu.uu);
radcan(ww.uu);
radcan(uu.ww);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Transformation matrix

    [ u[1]  w[1] ]
U = [            ]
    [ u[2]  w[2] ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
U : matrix([u[1][1], w[1][1]],[u[1][2], w[1][2]]);
Ut : transpose(U)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
UU : factor(radcan(subst(lambda_2, eta[2], subst(lambda_1, eta[1], U))))$
UUt : transpose(UU)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Matrix U is orthogonal
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(Ut.U);
radcan(U.Ut);
radcan(UUt.UU);
radcan(UU.UUt);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we transform matrix C by U
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x_prime : ratsimp(radcan(U.CC.Ut));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
factor(subst(sigma[b]*b, abs(b), factor(num(x_prime[1,2]))));
factor(subst(sigma[b]*b, abs(b), factor(num(x_prime[2,1]))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp(radcan(Ut.CC.U));
C_prime :subst(1/sigma[b], sigma[b],
  ratsimp(subst(sigma[b]*b, abs(b),subst(-c*b, eta[1]*eta[2], %))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp(c_pow_L(C_prime, 10));
%-matrix([eta[1]^10,PolyN(9,eta[1],eta[2])*sigma[b]*(c-b)],[0,eta[2]^10])$
ratsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D:matrix([d,0],[delta,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_prime_1:factor(Ut.D.U);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_prime_1.matrix([eta[1]^L,P[L-1]],[0,eta[2]^L])$
factor(%);
Sp(%);
ratsimp(%);
% + 1/(b^2+eta[2]^2)*(
                      (b*delta+eta[2]*d)*(P[L-1]*abs(b) - eta[2]^(L+1)) + eta[1]^L*b*(eta[2]*delta-b*d)
                     );
ratsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
b=0
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
C : matrix([a,0],[c,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Eigenvalues and eigenvectors.
The two eigenvectors here are not normalized and are not orthogonal
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[xvals, xvecs] : eigenvectors( C )$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lambda_1 : xvals[1][1];
u : xvecs[1][1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lambda_2 : xvals[1][2];
v : xvecs[2][1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(u.u);
radcan(v.v);
radcan(u.v);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now we can rewrite the eigenvectors using new eigenvalues notation: lambda -> eta
eta_1 == lambda_1
eta_2 == lambda_2
and here we can normalize the eigenvectors u and v
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u : matrix([1, c/a])$
u : radcan(u / sqrt(u.u));
v : matrix([0,1])$
v : radcan(v / sqrt(v.v));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(u.u);
radcan(v.v);
radcan(u.v);
factor(
  subst(2*b*c+a^2, eta[1]^2+eta[2]^2, 
    subst(b^2*c^2, eta[1]^2*eta[2]^2,
      subst(-b*c, eta[1]*eta[2], %))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we define vector w, orthogonal to vector u.
Here w_anorm is the non-normalized initial version of w
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_anorm : alpha*u + beta * v;
w_alpha_beta : solve([factor(radcan(w_anorm.u)) = 0], [alpha,beta]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
w_alpha : 1;
w_beta  : factor(subst(1, %r2, rhs(w_alpha_beta[1][2])));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we have wector w, orthogonal to vector u
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_anorm : factor(radcan(w_alpha * u + w_beta * v));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and we must normalize it
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
w_norm_factor : sqrt(radcan(w_anorm.w_anorm))$
w : radcan(w_anorm / w_norm_factor);
w_Alpha : radcan(w_alpha / w_norm_factor);
w_Beta  : radcan(w_beta / w_norm_factor);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
w = radcan( w_Alpha * u + w_Beta *v );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
radcan(w.w);
radcan(w.u);
radcan(v.w);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we can substitute eta-values with their lambda-values,
defining new corresponding vectors w -> ww, u -> uu
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
"u" = u;
"w" = w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Trnasformation matrix
    [ u[1]  w[1] ]
U = [            ]
    [ u[2]  w[2] ]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
U : matrix([u[1][1], w[1][1]],[u[1][2], w[1][2]]);
Ut : transpose(U)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Matrix U is orthogonal
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(Ut.U);
radcan(U.Ut);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here we transform matrix C by U
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
C_prime : ratsimp(radcan(Ut.C.U));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp(c_pow_L(C_prime, 10));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D:matrix([d,0],[delta,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_prime_1:factor(Ut.D.U);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_prime_1.matrix([a^L,a^(L-2)*abs(a)*abs(c)],[0,0])$
factor(%);
Sp(%);
ratsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Algebra's matrices
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
p = probability for transition {0}{1->0}
q = \tilde{p} = probability for transition {1}{1->0}
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Dop = operator -> occupied position
Eop = operator -> empty position
Cop = Dop + Eop
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
D.E = D + E
C = D + E
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Dop:matrix([d,0],[p/(1-p)*d*e,0])$
Eop:matrix([e,(p-q)/p],[0,0])$
Cop:Dop+Eop$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Cop;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Eigenvalues and eigenvectors of Cop matrix

Here we can also use the following relations:
C.u = lambda_1*u
C.v = lambda_2*v

u = (1, -lambda_2/b) = (1, c/lambda_1)
v = (1, -lambda_1/b) = (1, c/lambda_2)

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[vals, vecs] : eigenvectors(Cop)$
Lambda_1 : radcan(vals[1][1]);
Lambda_2 : radcan(vals[1][2]);
uCop : radcan(vecs[1][1]);
vCop : radcan(vecs[2][1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
factor(Lambda_1)$
subst((e-d)^2,e^2-2*d*e+d^2,%); 
factor(Lambda_2)$
subst((e-d)^2,e^2-2*d*e+d^2,%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_prime : ratsimp(subst(sigma[b]*b, abs(b), Ut.Dop.U));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Sp(C_prime);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Sp(ratsimp(D_prime.C_prime)) $

ratsimp(subst(1, sigma[b]^2, %))$
factor(
  subst(-p/(1-p)*d*e*(p-q)/p, eta[1]*eta[2],
    subst((p-q)/p, b, 
      subst(p/(1-p)*d*e, c, %)
    )
  )
)$

radcan(
  subst(Lambda_1, eta[1], 
    subst(Lambda_2, eta[2], %)
  )
);

ratsimp(Sp(Dop.Cop));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
